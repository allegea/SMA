/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Principal.java
 *
 * Created on 18/12/2008, 04:10:21 PM
 */

package interfaz;
import graficos.*;
import agentes.AgenteAdministrador;

import java.sql.*;
import basedatos.*;


import java.io.PrintWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Date;

import javax.swing.filechooser.FileFilter;

import java.util.List;

import org.jdom.*;
import org.jdom.input.*;

import java.io.File;
import java.io.FileOutputStream;

import java.awt.BorderLayout;
import java.awt.Container;

import java.io.BufferedReader;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.*;

import javax.swing.JProgressBar;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.XYPlot;

import org.jfree.data.time.Millisecond;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.jfree.ui.RefineryUtilities;

// Librerias para lanzar JADE desde la clase
import jade.core.Runtime;
import jade.core.Profile;
import jade.core.ProfileImpl;
import jade.wrapper.*;
import java.awt.Desktop;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Arrays;

/**
 *
 * @author Alejo
 */
public class Main extends javax.swing.JFrame {

    ConexionBD BD;
    ConexionBD BDinicializar;
    public static String nombreArchivo = "simulacion.xml";
    Container contenedor;
    public static int sizeCalces = 0;
    public static FileWriter Origen=null;
    public static PrintWriter archivo=null;

    public static FileWriter pararSub=null;
    public static PrintWriter paraSubastador=null;

    public static int CalcesEnRunTime = 1;

    /** Creates new form Principal */
    public Main() {
        initComponents();
        this.setLocationRelativeTo(null);
         editarTodo(false);
        contenedor = this.getContentPane();
      // CalcesRunTime(0);
       //panelGrafico.setVisible(false);
         
         BD = new ConexionBD("mysql");

         //System.out.println("Examinar funcion para el canal");
         //BD.inicializarBD();

         ResultSet r = BD.consulta("select max(repeticion) from cotizacion");
         try {
         if(r.next())
                   numeroRepeticiones = r.getInt(1);

                BD.cerrarConexion();
            }
        catch (SQLException ex) {
                    ex.printStackTrace();
                }

         BD.cerrarConexion();

         //SeleccionIteracion.setText("Select the stock");
         MenuResultadosGeneralesSaldos.setText("Agents Budget Rating");
         MenuResultadosRSI.setText("Relative Strength Index");

                /*try {
                        Origen = new FileWriter("CalceRunTime.txt");
                        archivo = new PrintWriter(Origen);
                        archivo.println(CalcesEnRunTime);
                        archivo.close();

                        pararSub = new FileWriter("Continuar.txt");
                        paraSubastador = new PrintWriter(pararSub);
                        paraSubastador.println(0);
                        paraSubastador.close();
                    } catch (IOException ex) {
                       ex.printStackTrace();
                    }*/
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SeleccionAccionResultados = new javax.swing.JLabel();
        AccionParaResultados = new javax.swing.JComboBox();
        AceptarAccionResultados = new javax.swing.JButton();
        AccionParaIteracion = new javax.swing.JComboBox();
        panelGrafico = new javax.swing.JPanel();
        Escudo = new javax.swing.JLabel();
        SeleccionAccionIndicadores = new javax.swing.JLabel();
        AccionParaIndicadores = new javax.swing.JComboBox();
        AceptarAccionIndicadores = new javax.swing.JButton();
        SeleccionIteracion = new javax.swing.JLabel();
        MenuPrincipal = new javax.swing.JMenuBar();
        MenuSimulacion = new javax.swing.JMenu();
        MenuSimulacionParametros = new javax.swing.JMenuItem();
        menuCargarSimulacion = new javax.swing.JMenuItem();
        MenuSimulacionIniciar = new javax.swing.JMenuItem();
        MenuSimulacionPausar = new javax.swing.JMenuItem();
        MenuSimulacionDetener = new javax.swing.JMenuItem();
        MenuSimulacionGuardar = new javax.swing.JMenuItem();
        MenuResultados = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        StilizedMenu = new javax.swing.JMenu();
        MenuResultadosStylized = new javax.swing.JMenuItem();
        StylizedDistribution = new javax.swing.JMenuItem();
        StylizedClustering = new javax.swing.JMenuItem();
        StylizedReturns = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        MenuResultadosAccion = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        MenuResultadosLiquidity = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        MenuResultadosCandlesTick = new javax.swing.JMenuItem();
        MenuResultadosVHF = new javax.swing.JMenuItem();
        MenuResultadosRSI = new javax.swing.JMenuItem();
        MenuResultadosMACD = new javax.swing.JMenuItem();
        MenuResultadosROC = new javax.swing.JMenuItem();
        MenuResultadosMomento = new javax.swing.JMenuItem();
        MenuResultadosPromediosSimples = new javax.swing.JMenuItem();
        MenuResultadosPromediosMoviles = new javax.swing.JMenuItem();
        MenuResultadosPromediosTriples = new javax.swing.JMenuItem();
        MenuResultadosAgente = new javax.swing.JMenu();
        MenuResultadosAgenteUtilidades = new javax.swing.JMenuItem();
        MenuResultadosAgenteAcciones = new javax.swing.JMenuItem();
        MenuResultadosGenerales = new javax.swing.JMenu();
        MenuResultadosGeneralesAgentes = new javax.swing.JMenuItem();
        MenuResultadosGeneralesTransacciones = new javax.swing.JMenuItem();
        MenuResultadosGeneralesSaldos = new javax.swing.JMenuItem();
        MenuResultadosGeneralesUtilidadesPorAcciones = new javax.swing.JMenuItem();
        MenuResultadosGeneralesUtilidades = new javax.swing.JMenuItem();
        MenuResultadosGeneralesAcciones = new javax.swing.JMenuItem();
        MenuResultadosGeneralesVolatiles = new javax.swing.JMenuItem();
        MenuResultadosResumen = new javax.swing.JMenuItem();
        MenuAyuda = new javax.swing.JMenu();
        MenuAyudaManual = new javax.swing.JMenuItem();
        MenuAyudaAcercaDe = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Market's  Simulation of Dynamic Sessions");
        setBounds(new java.awt.Rectangle(25, 222, 256, 256));
        setResizable(false);

        SeleccionAccionResultados.setText("Select the stock");

        AccionParaResultados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AccionParaResultadosMouseClicked(evt);
            }
        });

        AceptarAccionResultados.setText("Accept");
        AceptarAccionResultados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AceptarAccionResultadosActionPerformed(evt);
            }
        });

        Escudo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaz/escudo.gif"))); // NOI18N

        javax.swing.GroupLayout panelGraficoLayout = new javax.swing.GroupLayout(panelGrafico);
        panelGrafico.setLayout(panelGraficoLayout);
        panelGraficoLayout.setHorizontalGroup(
            panelGraficoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelGraficoLayout.createSequentialGroup()
                .addContainerGap(244, Short.MAX_VALUE)
                .addComponent(Escudo)
                .addGap(195, 195, 195))
        );
        panelGraficoLayout.setVerticalGroup(
            panelGraficoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGraficoLayout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(Escudo)
                .addContainerGap(75, Short.MAX_VALUE))
        );

        SeleccionAccionIndicadores.setText("Select the stock");

        AccionParaIndicadores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AccionParaIndicadoresMouseClicked(evt);
            }
        });

        AceptarAccionIndicadores.setText("Accept");
        AceptarAccionIndicadores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AceptarAccionIndicadoresActionPerformed(evt);
            }
        });

        SeleccionIteracion.setText("Select the stock");

        MenuSimulacion.setText("Simulation");

        MenuSimulacionParametros.setText("Configuration");
        MenuSimulacionParametros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuSimulacionParametrosActionPerformed(evt);
            }
        });
        MenuSimulacion.add(MenuSimulacionParametros);

        menuCargarSimulacion.setText("Load Simulation");
        menuCargarSimulacion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuCargarSimulacionMouseClicked(evt);
            }
        });
        menuCargarSimulacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCargarSimulacionActionPerformed(evt);
            }
        });
        MenuSimulacion.add(menuCargarSimulacion);

        MenuSimulacionIniciar.setText("Start");
        MenuSimulacionIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuSimulacionIniciarActionPerformed(evt);
            }
        });
        MenuSimulacion.add(MenuSimulacionIniciar);

        MenuSimulacionPausar.setText("Pause");
        MenuSimulacionPausar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuSimulacionPausarActionPerformed(evt);
            }
        });
        MenuSimulacion.add(MenuSimulacionPausar);

        MenuSimulacionDetener.setText("Stop");
        MenuSimulacionDetener.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuSimulacionDetenerActionPerformed(evt);
            }
        });
        MenuSimulacion.add(MenuSimulacionDetener);

        MenuSimulacionGuardar.setText("Save Prices");
        MenuSimulacionGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuSimulacionGuardarActionPerformed(evt);
            }
        });
        MenuSimulacion.add(MenuSimulacionGuardar);

        MenuPrincipal.add(MenuSimulacion);

        MenuResultados.setText("Results");
        MenuResultados.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                MenuResultadosMenuSelected(evt);
            }
        });

        jMenu1.setText("For Stock");

        StilizedMenu.setText("Stylized Facts");

        MenuResultadosStylized.setText("Overview");
        MenuResultadosStylized.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuResultadosStylizedActionPerformed(evt);
            }
        });
        StilizedMenu.add(MenuResultadosStylized);

        StylizedDistribution.setText("Distribution");
        StylizedDistribution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StylizedDistributionActionPerformed(evt);
            }
        });
        StilizedMenu.add(StylizedDistribution);

        StylizedClustering.setText("Volatility Clustering");
        StylizedClustering.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StylizedClusteringActionPerformed(evt);
            }
        });
        StilizedMenu.add(StylizedClustering);

        StylizedReturns.setText("Returns");
        StylizedReturns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StylizedReturnsActionPerformed(evt);
            }
        });
        StilizedMenu.add(StylizedReturns);

        jMenuItem1.setText("Autocorrelation by lag");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        StilizedMenu.add(jMenuItem1);

        jMenu1.add(StilizedMenu);

        MenuResultadosAccion.setText("Price/Volume");
        MenuResultadosAccion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MenuResultadosAccionMouseClicked(evt);
            }
        });
        MenuResultadosAccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuResultadosAccionActionPerformed(evt);
            }
        });
        jMenu1.add(MenuResultadosAccion);

        jMenuItem3.setText("Fundamental Value");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        MenuResultadosLiquidity.setText("Liquidity");
        MenuResultadosLiquidity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuResultadosLiquidityActionPerformed(evt);
            }
        });
        jMenu1.add(MenuResultadosLiquidity);

        jMenuItem2.setText("Overview of Liquidity");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        MenuResultadosCandlesTick.setText("CandlesTick");
        MenuResultadosCandlesTick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuResultadosCandlesTickActionPerformed(evt);
            }
        });
        jMenu1.add(MenuResultadosCandlesTick);

        MenuResultadosVHF.setText("Vertical Horizontal Filter");
        MenuResultadosVHF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuResultadosVHFActionPerformed(evt);
            }
        });
        jMenu1.add(MenuResultadosVHF);

        MenuResultadosRSI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuResultadosRSIActionPerformed(evt);
            }
        });
        jMenu1.add(MenuResultadosRSI);

        MenuResultadosMACD.setText("Moving Average Convergence Divergence");
        MenuResultadosMACD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuResultadosMACDActionPerformed(evt);
            }
        });
        jMenu1.add(MenuResultadosMACD);

        MenuResultadosROC.setText("Rate of Change");
        MenuResultadosROC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuResultadosROCActionPerformed(evt);
            }
        });
        jMenu1.add(MenuResultadosROC);

        MenuResultadosMomento.setText("Momentum");
        MenuResultadosMomento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuResultadosMomentoActionPerformed(evt);
            }
        });
        jMenu1.add(MenuResultadosMomento);

        MenuResultadosPromediosSimples.setText("Single Moving Average");
        MenuResultadosPromediosSimples.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuResultadosPromediosSimplesActionPerformed(evt);
            }
        });
        jMenu1.add(MenuResultadosPromediosSimples);

        MenuResultadosPromediosMoviles.setText("Double Moving Average");
        MenuResultadosPromediosMoviles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuResultadosPromediosMovilesActionPerformed(evt);
            }
        });
        jMenu1.add(MenuResultadosPromediosMoviles);

        MenuResultadosPromediosTriples.setText("Triple Moving Average");
        MenuResultadosPromediosTriples.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuResultadosPromediosTriplesActionPerformed(evt);
            }
        });
        jMenu1.add(MenuResultadosPromediosTriples);

        MenuResultados.add(jMenu1);

        MenuResultadosAgente.setText("For Agent");

        MenuResultadosAgenteUtilidades.setText("Profitability");
        MenuResultadosAgenteUtilidades.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MenuResultadosAgenteUtilidadesMouseClicked(evt);
            }
        });
        MenuResultadosAgenteUtilidades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuResultadosAgenteUtilidadesUtilidadesActionPerformed(evt);
            }
        });
        MenuResultadosAgente.add(MenuResultadosAgenteUtilidades);

        MenuResultadosAgenteAcciones.setText("Stock Information");
        MenuResultadosAgenteAcciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuResultadosAgenteAccionesActionPerformed(evt);
            }
        });
        MenuResultadosAgente.add(MenuResultadosAgenteAcciones);

        MenuResultados.add(MenuResultadosAgente);

        MenuResultadosGenerales.setText("Overall");

        MenuResultadosGeneralesAgentes.setText("Registered Agents");
        MenuResultadosGeneralesAgentes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuResultadosGeneralesAgentesActionPerformed(evt);
            }
        });
        MenuResultadosGenerales.add(MenuResultadosGeneralesAgentes);

        MenuResultadosGeneralesTransacciones.setText("Transaction");
        MenuResultadosGeneralesTransacciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuResultadosGeneralesTransaccionesActionPerformed(evt);
            }
        });
        MenuResultadosGenerales.add(MenuResultadosGeneralesTransacciones);

        MenuResultadosGeneralesSaldos.setText("Agents Budget Rating");
        MenuResultadosGeneralesSaldos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuResultadosGeneralesSaldosActionPerformed(evt);
            }
        });
        MenuResultadosGenerales.add(MenuResultadosGeneralesSaldos);

        MenuResultadosGeneralesUtilidadesPorAcciones.setText("Agents Profitability Rating");
        MenuResultadosGeneralesUtilidadesPorAcciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuResultadosGeneralesUtilidadesPorAccionesActionPerformed(evt);
            }
        });
        MenuResultadosGenerales.add(MenuResultadosGeneralesUtilidadesPorAcciones);

        MenuResultadosGeneralesUtilidades.setText("Profitability per Agent");
        MenuResultadosGeneralesUtilidades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuResultadosGeneralesUtilidadesActionPerformed(evt);
            }
        });
        MenuResultadosGenerales.add(MenuResultadosGeneralesUtilidades);

        MenuResultadosGeneralesAcciones.setText("Stock Profitability (Returns) Rating (?)");
        MenuResultadosGeneralesAcciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuResultadosGeneralesAccionesActionPerformed(evt);
            }
        });
        MenuResultadosGenerales.add(MenuResultadosGeneralesAcciones);

        MenuResultadosGeneralesVolatiles.setText("Volatile Stock Rating");
        MenuResultadosGeneralesVolatiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuResultadosGeneralesVolatilesActionPerformed(evt);
            }
        });
        MenuResultadosGenerales.add(MenuResultadosGeneralesVolatiles);

        MenuResultados.add(MenuResultadosGenerales);

        MenuResultadosResumen.setText("Overview");
        MenuResultadosResumen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuResultadosResumenActionPerformed(evt);
            }
        });
        MenuResultados.add(MenuResultadosResumen);

        MenuPrincipal.add(MenuResultados);

        MenuAyuda.setText("Help");

        MenuAyudaManual.setText("Contents");
        MenuAyudaManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuAyudaManualActionPerformed(evt);
            }
        });
        MenuAyuda.add(MenuAyudaManual);

        MenuAyudaAcercaDe.setText("About");
        MenuAyudaAcercaDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuAyudaAcercaDeActionPerformed(evt);
            }
        });
        MenuAyuda.add(MenuAyudaAcercaDe);

        MenuPrincipal.add(MenuAyuda);

        setJMenuBar(MenuPrincipal);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(SeleccionIteracion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(AccionParaIteracion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(SeleccionAccionIndicadores)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                        .addComponent(AccionParaIndicadores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(SeleccionAccionResultados)
                        .addGap(51, 51, 51)
                        .addComponent(AccionParaResultados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 257, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(AceptarAccionResultados)
                    .addComponent(AceptarAccionIndicadores))
                .addGap(69, 69, 69))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(panelGrafico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SeleccionAccionResultados)
                    .addComponent(AceptarAccionResultados)
                    .addComponent(AccionParaResultados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SeleccionAccionIndicadores)
                    .addComponent(AccionParaIndicadores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AceptarAccionIndicadores))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AccionParaIteracion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SeleccionIteracion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelGrafico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MenuSimulacionParametrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuSimulacionParametrosActionPerformed
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new parametros_simulacion().setVisible(true);
            }
        });


    }//GEN-LAST:event_MenuSimulacionParametrosActionPerformed

    private void MenuSimulacionIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuSimulacionIniciarActionPerformed

        ejecutarSimulacion();
    }//GEN-LAST:event_MenuSimulacionIniciarActionPerformed

    private void MenuResultadosAccionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MenuResultadosAccionMouseClicked
       
}//GEN-LAST:event_MenuResultadosAccionMouseClicked

    private void MenuResultadosAccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuResultadosAccionActionPerformed

        editarResultados(true);
   
        ResultadosGraficos();

        SeleccionAccionResultados.setText("Select the stock");
        ResultadosAccion = true;

        consultaParaResultados("SELECT nombre FROM producto");

        seleccionarIteracion();

}//GEN-LAST:event_MenuResultadosAccionActionPerformed

    private void AceptarAccionResultadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AceptarAccionResultadosActionPerformed

        int seleccionCombo = 0;
        int iterActual = 1;
        String NombreAccion = new String();
        String NombreAgente = new String();
            
                    
        if(numeroRepeticiones>1)
        {
            if(resultados && !ResultadosAccionStylized)
            iterActual = Integer.parseInt(AccionParaIndicadores.getSelectedItem().toString());

            if(ResultadosOverview)
            {
                iterActual = Integer.parseInt(AccionParaResultados.getSelectedItem().toString());
                final Resumen overview = new Resumen(iterActual);
                overview.pack();
                RefineryUtilities.centerFrameOnScreen(overview);
                overview.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
                overview.setVisible(true);
                //ResultadosOverview = false;

            }


            if(ResultadosAgentesPeriodo)
            {
                iterActual = Integer.parseInt(AccionParaResultados.getSelectedItem().toString());
                final AgentesXPeriodo demo = new AgentesXPeriodo("Agents by each date", iterActual);
                demo.pack();
                RefineryUtilities.centerFrameOnScreen(demo);
                demo.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
                demo.setVisible(true);
                //ResultadosAgentesPeriodo = false;
            }

            if(ResultadosRentabilidadAgente)
            {
                iterActual = Integer.parseInt(AccionParaResultados.getSelectedItem().toString());
                final RentabilidadXAgente demo = new RentabilidadXAgente("Profitability per Agent", iterActual);
                demo.pack();
                RefineryUtilities.centerFrameOnScreen(demo);
                demo.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
                demo.setVisible(true);
                //ResultadosRentabilidadAgente = false;
            }

            if(ResultadosRentabilidadAccion)
            {
                iterActual = Integer.parseInt(AccionParaResultados.getSelectedItem().toString());
                final RentabilidadXAccion demo = new RentabilidadXAccion("Profitability per Stock",iterActual);
                demo.pack();
                RefineryUtilities.centerFrameOnScreen(demo);
                demo.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
                demo.setVisible(true);
                //ResultadosRentabilidadAccion = false;
            }

            if(ResultadosAccionesVolatilidad)
            {
                iterActual = Integer.parseInt(AccionParaResultados.getSelectedItem().toString());
                final AccionesVolatilidad demo = new AccionesVolatilidad("Volatility of the Stocks",iterActual);
                demo.pack();
                RefineryUtilities.centerFrameOnScreen(demo);
                demo.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
                demo.setVisible(true);
                //ResultadosAccionesVolatilidad = false;
            }
            //resultados = true;
//fdsf


        }
        
        if(ResultadosFundamentalValue)
        {
            NombreAccion = AccionParaResultados.getSelectedItem().toString();
            final PrecioFundamental generar = new PrecioFundamental(NombreAccion,iterActual);
            generar.pack();
            RefineryUtilities.centerFrameOnScreen(generar);
            generar.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
            generar.setVisible(true);


            //ResultadosAccion = false;
        }
        
        
        if(ResultadosAccion)
        {
            NombreAccion = AccionParaResultados.getSelectedItem().toString();
            final PrecioVolumen generar = new PrecioVolumen("Price/Volume of",NombreAccion,iterActual);
            generar.pack();
            RefineryUtilities.centerFrameOnScreen(generar);
            generar.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
            generar.setVisible(true);


            //ResultadosAccion = false;
        }

        if(ResultadosAccionStylized)
        {
            NombreAccion = AccionParaResultados.getSelectedItem().toString();
            final ResumenStylized resumen = new ResumenStylized(NombreAccion);
            resumen.pack();
            RefineryUtilities.centerFrameOnScreen(resumen);
            resumen.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
            resumen.setVisible(true);

        }

        if(ResuldatosAccionStylizedReturns)
        {
            NombreAccion = AccionParaResultados.getSelectedItem().toString();
            final Retornos graficar = new Retornos("Returns of",NombreAccion,iterActual,0);
            graficar.pack();
            RefineryUtilities.centerFrameOnScreen(graficar);
            graficar.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
            graficar.setVisible(true);

            final Retornos graficarS = new Retornos("Squared Returns of",NombreAccion,iterActual,1);
            graficarS.pack();
            RefineryUtilities.centerFrameOnScreen(graficarS);
            graficarS.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
            graficarS.setVisible(true);

            final Retornos graficarA = new Retornos("Abs Returns of",NombreAccion,iterActual,2);
            graficarA.pack();
            RefineryUtilities.centerFrameOnScreen(graficarA);
            graficarA.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
            graficarA.setVisible(true);
        }
        
        if(ResuldatosAccionStylizedClustering)
        {
            NombreAccion = AccionParaResultados.getSelectedItem().toString();
            final Autocorrelacion graficar = new Autocorrelacion(NombreAccion,iterActual,0);
            graficar.pack();
            RefineryUtilities.centerFrameOnScreen(graficar);
            graficar.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
            graficar.setVisible(true);
            
            final Autocorrelacion graficarS = new Autocorrelacion(NombreAccion,iterActual,1);
            graficarS.pack();
            RefineryUtilities.centerFrameOnScreen(graficarS);
            graficarS.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
            graficarS.setVisible(true);
            
            final Autocorrelacion graficarA = new Autocorrelacion(NombreAccion,iterActual,2);
            graficarA.pack();
            RefineryUtilities.centerFrameOnScreen(graficarA);
            graficarA.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
            graficarA.setVisible(true);
        }
        
        if(ResuldatosAccionAutocorrBy)
        {
            NombreAccion = AccionParaResultados.getSelectedItem().toString();
            final AutocorrXLag2 graficar = new AutocorrXLag2(NombreAccion,iterActual,1);
            graficar.pack();
            RefineryUtilities.centerFrameOnScreen(graficar);
            graficar.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
            graficar.setVisible(true);
            
            final AutocorrXLag2 graficarS = new AutocorrXLag2(NombreAccion,iterActual,2);
            graficarS.pack();
            RefineryUtilities.centerFrameOnScreen(graficarS);
            graficarS.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
            graficarS.setVisible(true);
            
            final AutocorrXLag2 graficarA = new AutocorrXLag2(NombreAccion,iterActual,3);
            graficarA.pack();
            RefineryUtilities.centerFrameOnScreen(graficarA);
            graficarA.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
            graficarA.setVisible(true);
        }

        if(ResuldatosAccionStylizedDistributions)
        {
            NombreAccion = AccionParaResultados.getSelectedItem().toString();
            final HistogramaRetornos retornos = new HistogramaRetornos("Histogram of ",NombreAccion,iterActual);
            retornos.pack();
            RefineryUtilities.centerFrameOnScreen(retornos);
            retornos.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
            retornos.setVisible(true);
        }

        if(ResultadosAccionCandlesTick)
        {
            NombreAccion = AccionParaResultados.getSelectedItem().toString();
            final CandlesTick candles = new CandlesTick("CandlesTick of ",NombreAccion,iterActual);
            candles.pack();
            RefineryUtilities.centerFrameOnScreen(candles);
            candles.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
            candles.setVisible(true);
        }

        if(ResultadosAccionLiquidity)
        {
            NombreAccion = AccionParaResultados.getSelectedItem().toString();
            final Liquidez liqui = new Liquidez("Liquidity",NombreAccion,iterActual);
            liqui.pack();
            RefineryUtilities.centerFrameOnScreen(liqui);
            liqui.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
            liqui.setVisible(true);
        }

        if(ResultadosAgenteUtilidades)
        {
            NombreAgente = AccionParaResultados.getSelectedItem().toString();
            final UtilidadesAgentes demo = new UtilidadesAgentes("Profits for each date", NombreAgente, iterActual);
            demo.pack();
            RefineryUtilities.centerFrameOnScreen(demo);
            demo.setVisible(true);

            //ResultadosAgenteUtilidades = false;
        }

        if(ResultadosAgenteAccion)
        {
            NombreAgente = AccionParaResultados.getSelectedItem().toString();
            final CantidadAccionesXPeriodo demo = new CantidadAccionesXPeriodo("Amount stock of the agent ", NombreAgente, iterActual);
            demo.pack();
            RefineryUtilities.centerFrameOnScreen(demo);
            demo.setVisible(true);

            //ResultadosAgenteAccion = false;

        }

        if(ResultadosGuardarCotizaciones)
        {
            NombreAccion = AccionParaResultados.getSelectedItem().toString();
            GuardarCotizacion(NombreAccion,iterActual);
            //NombreAccion = new String();

            //ResultadosGuardarCotizaciones = false;
        }

        if(ResultadosTopSaldos)
        {
            seleccionCombo = Integer.parseInt(AccionParaResultados.getSelectedItem().toString());

            RatingSaldos demo = new RatingSaldos("Agents Budget Rating",seleccionCombo,iterActual);
            demo.pack();
            RefineryUtilities.centerFrameOnScreen(demo);
            demo.setVisible(true);

            //ResultadosTopSaldos = false;
        }
        
        if(ResultadosTopUtilidades)
        {
            seleccionCombo = Integer.parseInt(AccionParaResultados.getSelectedItem().toString());

            RatingUtilidades demo = new RatingUtilidades("Agents Profitability Rating for Stocks",seleccionCombo, iterActual);
            demo.pack();
            RefineryUtilities.centerFrameOnScreen(demo);
            demo.setVisible(true);

            //ResultadosTopSaldos = false;
        }

        if(ResultadosTransacciones)
        {
            String tipo = null;
            int mostrar = -1;
             NombreAccion = AccionParaResultados.getSelectedItem().toString();
             if(NombreAccion.equalsIgnoreCase("Buy Order"))
             {
                 mostrar = 0;
                 tipo="de compra";
             }
             else
             {
                if(NombreAccion.equalsIgnoreCase("Sell Order"))
                {
                    mostrar = 1;
                    tipo="de venta";
                }
                    else
                    {
                        mostrar = 2;
                        tipo="totales";
                    }
             }

            Transacciones demo = new Transacciones("Transaction of "+tipo+" of all the agents", mostrar, iterActual);
            demo.pack();
            RefineryUtilities.centerFrameOnScreen(demo);
            demo.setVisible(true);

            //ResultadosTopSaldos = false;
        }



        //editarResultados(false);

}//GEN-LAST:event_AceptarAccionResultadosActionPerformed

    private void MenuResultadosAgenteUtilidadesUtilidadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuResultadosAgenteUtilidadesUtilidadesActionPerformed
        editarResultados(true);
        

        ResultadosGraficos();
        
        ResultadosAgenteUtilidades = true;
        

        consultaParaResultados("SELECT nombre FROM bursatil ORDER BY nombre");

        seleccionarIteracion();

        SeleccionAccionResultados.setText("Select the agent");
        

}//GEN-LAST:event_MenuResultadosAgenteUtilidadesUtilidadesActionPerformed

    private void MenuResultadosAgenteUtilidadesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MenuResultadosAgenteUtilidadesMouseClicked
        // TODO add your handling code here:
}//GEN-LAST:event_MenuResultadosAgenteUtilidadesMouseClicked

    private void MenuResultadosGeneralesAgentesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuResultadosGeneralesAgentesActionPerformed

        ResultadosGraficos();
        if(numeroRepeticiones>1)
        {
            ResultadosAgentesPeriodo = true;
            Iteracion();
        }
        else
        {
            editarResultados(false);
            editarResultadosIndicadores(false);

            final AgentesXPeriodo demo = new AgentesXPeriodo("Agents by each date", 1);
            demo.pack();
            RefineryUtilities.centerFrameOnScreen(demo);
            demo.setVisible(true);
        }

    }//GEN-LAST:event_MenuResultadosGeneralesAgentesActionPerformed

    private void MenuResultadosGeneralesSaldosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuResultadosGeneralesSaldosActionPerformed

        editarResultados(true);
        

        ResultadosGraficos();
        
        ResultadosTopSaldos = true;
        //editarTopGrafica(false);
        AccionParaResultados.removeAllItems();
        seleccionarIteracion();
        SeleccionAccionResultados.setText("Select the top");
        int cantidadAgentes = 0;
        BD = new ConexionBD("mysql");
        ResultSet r = BD.consulta("SELECT count(IDAgente) FROM saldoxagente WHERE fecha=0");
        try {

                if(r.next())
                cantidadAgentes=r.getInt(1);
               


                BD.cerrarConexion();
            }
        catch (SQLException ex) {
                    ex.printStackTrace();
                }

        

        if(cantidadAgentes > 10)
        {
            AccionParaResultados.addItem("3");
            AccionParaResultados.addItem("5");
            AccionParaResultados.addItem("10");
            AccionParaResultados.addItem(cantidadAgentes);
        }
        else
        {
            if(cantidadAgentes > 5)
            {
                AccionParaResultados.addItem("3");
                AccionParaResultados.addItem("5");
                AccionParaResultados.addItem(cantidadAgentes);
            }
            else
            {
                if(cantidadAgentes > 3)
                {
                    AccionParaResultados.addItem("3");
                    AccionParaResultados.addItem(cantidadAgentes);
                }
                else
                    AccionParaResultados.addItem(cantidadAgentes);
            }

        }
    }//GEN-LAST:event_MenuResultadosGeneralesSaldosActionPerformed

    private void MenuResultadosGeneralesUtilidadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuResultadosGeneralesUtilidadesActionPerformed

        ResultadosGraficos();
        if(numeroRepeticiones>1)
        {
            ResultadosRentabilidadAgente = true;
            Iteracion();
        }
        else
        {
            editarResultados(false);
            editarResultadosIndicadores(false);

            final RentabilidadXAgente demo = new RentabilidadXAgente("Profitability per Agent", 1);
            demo.pack();
            RefineryUtilities.centerFrameOnScreen(demo);
            demo.setVisible(true);
        }
        
    }//GEN-LAST:event_MenuResultadosGeneralesUtilidadesActionPerformed

    private void MenuResultadosGeneralesAccionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuResultadosGeneralesAccionesActionPerformed
        ResultadosGraficos();
        if(numeroRepeticiones>1)
        {
            ResultadosRentabilidadAccion = true;
            Iteracion();
        }
        else
        {
            editarResultados(false);
            editarResultadosIndicadores(false);

            
            final RentabilidadXAccion demo = new RentabilidadXAccion("Profitability per Stock",1);
            demo.pack();
            RefineryUtilities.centerFrameOnScreen(demo);
            demo.setVisible(true);
        }
        
        
    }//GEN-LAST:event_MenuResultadosGeneralesAccionesActionPerformed

    private void MenuResultadosAgenteAccionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuResultadosAgenteAccionesActionPerformed
        
        editarResultados(true);
        
        ResultadosGraficos();
        
        seleccionarIteracion();

        SeleccionAccionResultados.setText("Select the agent");
        ResultadosAgenteAccion = true;

        
        AccionParaResultados.removeAllItems();
        consultaParaResultados("SELECT nombre FROM bursatil ORDER BY nombre");
        
    }//GEN-LAST:event_MenuResultadosAgenteAccionesActionPerformed

    private void MenuResultadosGeneralesVolatilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuResultadosGeneralesVolatilesActionPerformed

        ResultadosGraficos();
        if(numeroRepeticiones>1)
        {

            ResultadosAccionesVolatilidad = true;
            Iteracion();
        }
        else
        {
            editarResultados(false);
            editarResultadosIndicadores(false);
            

            final AccionesVolatilidad demo = new AccionesVolatilidad("Volatility of the Stocks",1);
            demo.pack();
            RefineryUtilities.centerFrameOnScreen(demo);
            demo.setVisible(true);
        }
        

    }//GEN-LAST:event_MenuResultadosGeneralesVolatilesActionPerformed

    private void MenuSimulacionGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuSimulacionGuardarActionPerformed
        
        editarResultados(true);
        editarResultadosIndicadores(false);
        ResultadosGraficos();

        SeleccionAccionResultados.setText("Select the stock");
        ResultadosGuardarCotizaciones = true;

        seleccionarIteracion();
        
        consultaParaResultados("SELECT nombre FROM producto");
        
    }//GEN-LAST:event_MenuSimulacionGuardarActionPerformed

    private void menuCargarSimulacionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuCargarSimulacionMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_menuCargarSimulacionMouseClicked

    private void menuCargarSimulacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCargarSimulacionActionPerformed
        // TODO add your handling code here:
        
        JFileChooser fileChooser = new JFileChooser(".");
        
        FileFilter filtro = new ExtensionFileFilter("XML", "xml");
        fileChooser.setFileFilter(filtro);
        int seleccion = fileChooser.showOpenDialog(null);

        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File archivo = fileChooser.getSelectedFile();
            nombreArchivo = archivo.getPath();
            System.out.println(nombreArchivo);
            ejecutarSimulacion();
        }
    }//GEN-LAST:event_menuCargarSimulacionActionPerformed

    private void MenuResultadosMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_MenuResultadosMenuSelected
        cambiar();
        panelGrafico.setVisible(false);
    }//GEN-LAST:event_MenuResultadosMenuSelected

    private void MenuResultadosGeneralesUtilidadesPorAccionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuResultadosGeneralesUtilidadesPorAccionesActionPerformed

        editarResultados(true);
        

        ResultadosGraficos();
        seleccionarIteracion();
        SeleccionAccionResultados.setText("Select the top");
        ResultadosTopUtilidades = true;
        //editarTopGrafica(false);
        AccionParaResultados.removeAllItems();


        int cantidadAgentes = 0;
        BD = new ConexionBD("mysql");
        ResultSet r = BD.consulta("SELECT count(IDAgente) FROM saldoxagente WHERE fecha=0 ");
        try {

                if(r.next())
                cantidadAgentes=r.getInt(1);



                BD.cerrarConexion();
            }
        catch (SQLException ex) {
                    ex.printStackTrace();
                }



        if(cantidadAgentes > 10)
        {
            AccionParaResultados.addItem("3");
            AccionParaResultados.addItem("5");
            AccionParaResultados.addItem("10");
            AccionParaResultados.addItem(cantidadAgentes);
        }
        else
        {
            if(cantidadAgentes > 5)
            {
                AccionParaResultados.addItem("3");
                AccionParaResultados.addItem("5");
                AccionParaResultados.addItem(cantidadAgentes);
            }
            else
            {
                if(cantidadAgentes > 3)
                {
                    AccionParaResultados.addItem("3");
                    AccionParaResultados.addItem(cantidadAgentes);
                }
                else
                    AccionParaResultados.addItem(cantidadAgentes);
            }

        }
    }//GEN-LAST:event_MenuResultadosGeneralesUtilidadesPorAccionesActionPerformed

    private void MenuResultadosPromediosMovilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuResultadosPromediosMovilesActionPerformed

        editarResultados(true);
        editarResultadosIndicadores(true);
        ResultadosGraficos();
        AccionesIndicadores = true;
        ResultadosPromediosMoviles = true;
        AceptarAccionResultados.setVisible(false);
        if(numeroRepeticiones>1)
        {
            agregarIteracionIndicadores();
            editarIteracion(true);

        }
        else
        {
        SeleccionAccionResultados.setText("Select the agent");
        consultaParaResultados("SELECT b.nombre FROM analisistecnico a, bursatil b where indicador = 'PDMCorto' and a.IDAgente = b.IDAgente and a.repeticion = "+1+" group by b.nombre");
        }
    }//GEN-LAST:event_MenuResultadosPromediosMovilesActionPerformed

    private void MenuResultadosVHFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuResultadosVHFActionPerformed

        editarResultados(true);
        editarResultadosIndicadores(true);
        ResultadosGraficos();
        AccionesIndicadores = true;
        AceptarAccionResultados.setVisible(false);
        ResultadosVHF = true;
        if(numeroRepeticiones>1)
        {
            agregarIteracionIndicadores();
            editarIteracion(true);
        }
        else
        {
            SeleccionAccionResultados.setText("Select the agent");
            consultaParaResultados("SELECT b.nombre FROM analisistecnico a, bursatil b where indicador = 'VHF' and a.IDAgente = b.IDAgente and a.repeticion = "+1+" group by b.nombre");

        }
        

        

        
    }//GEN-LAST:event_MenuResultadosVHFActionPerformed

    private void MenuResultadosRSIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuResultadosRSIActionPerformed

        editarResultados(true);
        editarResultadosIndicadores(true);
        ResultadosGraficos();
        AccionesIndicadores = true;
        AceptarAccionResultados.setVisible(false);
        ResultadosRSI = true;
        if(numeroRepeticiones>1)
        {
            agregarIteracionIndicadores();
            editarIteracion(true);
            
        }
        
        else
        {
            SeleccionAccionResultados.setText("Select the agent");

            consultaParaResultados("SELECT b.nombre FROM analisistecnico a, bursatil b where indicador = 'RSI' and a.IDAgente = b.IDAgente and a.repeticion = "+1+" group by b.nombre");
        }
    }//GEN-LAST:event_MenuResultadosRSIActionPerformed

    private void AceptarAccionIndicadoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AceptarAccionIndicadoresActionPerformed

         try {
        String NombreAccion = AccionParaIndicadores.getSelectedItem().toString();
        String NombreAgente = AccionParaResultados.getSelectedItem().toString();

        int iterActual = 1;
        if(numeroRepeticiones>1)
        {
            iterActual = Integer.parseInt(AccionParaResultados.getSelectedItem().toString());
            NombreAgente = AccionParaIndicadores.getSelectedItem().toString();
            NombreAccion = AccionParaIteracion.getSelectedItem().toString();
        }

        if(ResultadosPromediosMoviles)
        {

            final IndicadorPromediosDoblesGrafica generar = new IndicadorPromediosDoblesGrafica("Double Moving Average of",NombreAgente, NombreAccion,iterActual);
            generar.pack();
            RefineryUtilities.centerFrameOnScreen(generar);
            generar.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
            generar.setVisible(true);

            //ResultadosAccion = false;
        }

       if(ResultadosVHF)
        {
            final IndicadorVHFGrafica generar = new IndicadorVHFGrafica("Vertical Horizontal Filter of",NombreAgente,NombreAccion,iterActual);
            generar.pack();
            RefineryUtilities.centerFrameOnScreen(generar);
            generar.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
            generar.setVisible(true);

            //ResultadosAccion = false;
        }

       if(ResultadosRSI)
        {
            final IndicadorRSIGrafica generar = new IndicadorRSIGrafica("Relative Strength Index of",NombreAgente,NombreAccion,iterActual);
            generar.pack();
            RefineryUtilities.centerFrameOnScreen(generar);
            generar.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
            generar.setVisible(true);

            //ResultadosAccion = false;
        }

        if(ResultadosROC)
        {
            final IndicadorROCGrafica generar = new IndicadorROCGrafica("Rate of Change",NombreAgente,NombreAccion,iterActual);
            generar.pack();
            RefineryUtilities.centerFrameOnScreen(generar);
            generar.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
            generar.setVisible(true);

            //ResultadosAccion = false;
        }

        if(ResultadosMACD)
        {
            final IndicadorMACDGrafica generar = new IndicadorMACDGrafica("Moving Average Convergence Divergence of",NombreAgente,NombreAccion,iterActual);
            generar.pack();
            RefineryUtilities.centerFrameOnScreen(generar);
            generar.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
            generar.setVisible(true);

            //ResultadosAccion = false;
        }

        if(ResultadosPromediosSimple)
        {
            final IndicadorPromediosSimplesGrafica generar = new IndicadorPromediosSimplesGrafica("Single Moving Average of",NombreAgente,NombreAccion,iterActual);
            generar.pack();
            RefineryUtilities.centerFrameOnScreen(generar);
            generar.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
            generar.setVisible(true);

            //ResultadosAccion = false;
        }


        if(ResultadosPromediosTriples)
        {
            final IndicadorPromediosTriplesGrafica generar = new IndicadorPromediosTriplesGrafica("Triple Moving Average of",NombreAgente,NombreAccion,iterActual);
            generar.pack();
            RefineryUtilities.centerFrameOnScreen(generar);
            generar.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
            generar.setVisible(true);

            //ResultadosAccion = false;
        }

        if(ResultadosMomento)
        {
            final IndicadorMomentoGrafica generar = new IndicadorMomentoGrafica("Momentum of",NombreAgente,NombreAccion,iterActual);
            generar.pack();
            RefineryUtilities.centerFrameOnScreen(generar);
            generar.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
            generar.setVisible(true);

            //ResultadosAccion = false;
        }




        System.out.println("Agente "+NombreAgente);
        System.out.println("Accion "+NombreAccion);
        } catch (NullPointerException npe) {
            System.out.println("Excepcion");
	  }
        AccionesIndicadores = false;
}//GEN-LAST:event_AceptarAccionIndicadoresActionPerformed

    private void AccionParaResultadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AccionParaResultadosMouseClicked
               if(AccionesIndicadores == true)
               {
                   String query;
                   try {
                           if(numeroRepeticiones==1)
                           {
                               String nombreAgente = AccionParaResultados.getSelectedItem().toString();
                               query = "select p.nombre, a.IDAgente from analisistecnico a, bursatil b, producto p where b.nombre = '"+nombreAgente+"' and b.IDAgente = a.IDAgente and a.IDProducto = p.IDProducto and a.repeticion = "+1+" group by p.IDProducto";


                           }
                            else
                           {
                               int iterSeleccionada = Integer.parseInt(AccionParaResultados.getSelectedItem().toString());
                               String indicador= "";
                               if(ResultadosPromediosMoviles) indicador= "'PDMCorto'";
                                if(ResultadosVHF) indicador= "'VHF'";
                                if(ResultadosRSI) indicador= "'RSI'";
                                if(ResultadosMACD) indicador= "'MACD'";
                                if(ResultadosROC) indicador= "'ROC'";
                                if(ResultadosPromediosSimple) indicador= "'PMSimple'";
                                if(ResultadosPromediosTriples) indicador= "'PMTCorto'";
                                if(ResultadosMomento) indicador= "'Momento'";


                               query = "SELECT b.nombre FROM analisistecnico a, bursatil b where indicador = "+indicador+" and a.IDAgente = b.IDAgente and a.repeticion = "+iterSeleccionada+" group by b.nombre";

                            }

                        AccionParaIndicadores.removeAllItems();

                        BD = new ConexionBD("mysql");
                        ResultSet r = BD.consulta(query);


                        
                         while(r.next())
                             AccionParaIndicadores.addItem(r.getString(1));

                                BD.cerrarConexion();
                            
                   }
                   catch (SQLException ex) {
                                    ex.printStackTrace();
                                }
                   catch (NullPointerException npe) {
                                System.out.println("Excepcion - Boton");
                        }

                }
    }//GEN-LAST:event_AccionParaResultadosMouseClicked

    private void MenuResultadosMACDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuResultadosMACDActionPerformed

        editarResultados(true);
        editarResultadosIndicadores(true);
        ResultadosGraficos();
        AccionesIndicadores = true;
        ResultadosMACD = true;
        AceptarAccionResultados.setVisible(false);
        if(numeroRepeticiones>1)
        {
            agregarIteracionIndicadores();
            editarIteracion(true);
        }
         else{
 
        SeleccionAccionResultados.setText("Select the agent");
        consultaParaResultados("SELECT b.nombre FROM analisistecnico a, bursatil b where indicador = 'MACD' and a.IDAgente = b.IDAgente and a.repeticion = "+1+" group by b.nombre");
        }
    }//GEN-LAST:event_MenuResultadosMACDActionPerformed

    private void MenuResultadosROCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuResultadosROCActionPerformed

        editarResultados(true);
        editarResultadosIndicadores(true);
        ResultadosGraficos();
        AccionesIndicadores = true;
        ResultadosROC = true;
        AceptarAccionResultados.setVisible(false);
        if(numeroRepeticiones>1)
        {
            agregarIteracionIndicadores();
            editarIteracion(true);
        }
        else
        {
        
        SeleccionAccionResultados.setText("Select the agent");
        consultaParaResultados("SELECT b.nombre FROM analisistecnico a, bursatil b where indicador = 'ROC' and a.IDAgente = b.IDAgente and a.repeticion = "+1+" group by b.nombre");
        }
    }//GEN-LAST:event_MenuResultadosROCActionPerformed

    private void MenuResultadosPromediosSimplesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuResultadosPromediosSimplesActionPerformed

        editarResultados(true);
        editarResultadosIndicadores(true);
        ResultadosGraficos();
        AccionesIndicadores = true;
        ResultadosPromediosSimple = true;
        AceptarAccionResultados.setVisible(false);
        if(numeroRepeticiones>1)
        {
            agregarIteracionIndicadores();
            editarIteracion(true);
        }
        else
        {
            SeleccionAccionResultados.setText("Select the agent");
            consultaParaResultados("SELECT b.nombre FROM analisistecnico a, bursatil b where indicador = 'PMSimple' and a.IDAgente = b.IDAgente and a.repeticion = "+1+" group by b.nombre");
        }
    }//GEN-LAST:event_MenuResultadosPromediosSimplesActionPerformed

    private void MenuResultadosPromediosTriplesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuResultadosPromediosTriplesActionPerformed

        editarResultados(true);
        editarResultadosIndicadores(true);
        ResultadosGraficos();
        AccionesIndicadores = true;
        ResultadosPromediosTriples = true;
        AceptarAccionResultados.setVisible(false);
        if(numeroRepeticiones>1)
        {
            agregarIteracionIndicadores();
            editarIteracion(true);
        }
         else
        {

        SeleccionAccionResultados.setText("Select the agent");
        consultaParaResultados("SELECT b.nombre FROM analisistecnico a, bursatil b where indicador = 'PMTCorto' and a.IDAgente = b.IDAgente and a.repeticion = "+1+" group by b.nombre");
        }
    }//GEN-LAST:event_MenuResultadosPromediosTriplesActionPerformed

    private void MenuResultadosGeneralesTransaccionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuResultadosGeneralesTransaccionesActionPerformed

        editarResultados(true);
  
        ResultadosGraficos();
        seleccionarIteracion();
        SeleccionAccionResultados.setText("Type of transaccion");
        ResultadosTransacciones = true;
        //editarTopGrafica(false);
        AccionParaResultados.removeAllItems();
        AccionParaResultados.addItem("Total");
        AccionParaResultados.addItem("Buy Order");
        AccionParaResultados.addItem("Sell Order");


    }//GEN-LAST:event_MenuResultadosGeneralesTransaccionesActionPerformed

    private void MenuResultadosMomentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuResultadosMomentoActionPerformed

        editarResultados(true);
        editarResultadosIndicadores(true);
        ResultadosGraficos();
        AccionesIndicadores = true;
        ResultadosMomento = true;
        AceptarAccionResultados.setVisible(false);
        if(numeroRepeticiones>1)
        {
            agregarIteracionIndicadores();
            editarIteracion(true);
        }
        else
        {
        SeleccionAccionResultados.setText("Select the agent");
        consultaParaResultados("SELECT b.nombre FROM analisistecnico a, bursatil b where indicador = 'Momento' and a.IDAgente = b.IDAgente and a.repeticion = "+1+" group by b.nombre");
        }
    }//GEN-LAST:event_MenuResultadosMomentoActionPerformed

    @SuppressWarnings("CallToThreadDumpStack")
    private void MenuAyudaManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuAyudaManualActionPerformed
        
        try {
            if (Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();
                InputStream resource = Thread.currentThread().getContextClassLoader().getResourceAsStream("manual_usuario.pdf");
                File file = File.createTempFile("manual_usuario", ".pdf");
                file.deleteOnExit();
                OutputStream out = new FileOutputStream(file);
               // copy contents from resource to out
                byte[] b = new byte[4 * 1024];
                int read;
                while ((read = resource.read(b)) != -1) {
                    out.write(b, 0, read);
                }

                out.close();
                desktop.open(file);
            }
        } catch(Exception e) {
                e.printStackTrace();
        }
    }//GEN-LAST:event_MenuAyudaManualActionPerformed

    private void MenuAyudaAcercaDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuAyudaAcercaDeActionPerformed
               /* java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AcercaDe().setVisible(true);
            }
        });*/
    }//GEN-LAST:event_MenuAyudaAcercaDeActionPerformed

    private void MenuSimulacionPausarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuSimulacionPausarActionPerformed
        //try
        {
        if(reanudar == false)
        {
            AgenteAdministrador.estadoActual = 1;
            MenuSimulacionPausar.setText("Resume");
            /*pararSub = new FileWriter("Continuar.txt");
            paraSubastador = new PrintWriter(pararSub);
            paraSubastador.println(1);
            paraSubastador.close();*/
            reanudar = true;
            mostrargrafica = 1;

        }
        else
            {
            AgenteAdministrador.estadoActual = 0;
                /*MenuSimulacionPausar.setText("Pause");
                pararSub = new FileWriter("Continuar.txt");
                paraSubastador = new PrintWriter(pararSub);
                paraSubastador.println(0);
                paraSubastador.close();*/
                mostrargrafica = 0;
                 reanudar = false;

                 
            }
        } /*catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }*/

}//GEN-LAST:event_MenuSimulacionPausarActionPerformed

    private void MenuSimulacionDetenerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuSimulacionDetenerActionPerformed

        AgenteAdministrador.estadoActual = 2;
        mostrargrafica = -1;
        /*try
            {

                pararSub = new FileWriter("Continuar.txt");
                paraSubastador = new PrintWriter(pararSub);
                paraSubastador.println(2);
                paraSubastador.close();
                mostrargrafica = -1;
            }
         catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }*/
    }//GEN-LAST:event_MenuSimulacionDetenerActionPerformed

    private void MenuResultadosResumenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuResultadosResumenActionPerformed


        if(numeroRepeticiones > 1)
        {
            ResultadosGraficos();
            ResultadosOverview = true;
            Iteracion();
        }
        else
        {

                final Resumen overview = new Resumen(1);
                overview.pack();
                RefineryUtilities.centerFrameOnScreen(overview);
                overview.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
                overview.setVisible(true);
        }

    }//GEN-LAST:event_MenuResultadosResumenActionPerformed

    private void MenuResultadosStylizedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuResultadosStylizedActionPerformed
        editarResultados(true);

        ResultadosGraficos();

        //seleccionarIteracion();

        SeleccionAccionResultados.setText("Select the stock");
        ResultadosAccionStylized = true;

        consultaParaResultados("SELECT nombre FROM producto");

      
    }//GEN-LAST:event_MenuResultadosStylizedActionPerformed

    private void MenuResultadosLiquidityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuResultadosLiquidityActionPerformed
        editarResultados(true);
        
        ResultadosGraficos();
        seleccionarIteracion();

        SeleccionAccionResultados.setText("Select the stock");
        ResultadosAccionLiquidity = true;

        consultaParaResultados("SELECT nombre FROM producto");

        AccionParaResultados.addItem("Market");

    }//GEN-LAST:event_MenuResultadosLiquidityActionPerformed

    private void MenuResultadosCandlesTickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuResultadosCandlesTickActionPerformed
        editarResultados(true);

        ResultadosGraficos();
        seleccionarIteracion();

        SeleccionAccionResultados.setText("Select the stock");
        ResultadosAccionCandlesTick = true;

        consultaParaResultados("SELECT nombre FROM producto");
    }//GEN-LAST:event_MenuResultadosCandlesTickActionPerformed

    private void MenuResultadosGeneralesSaldosActionPerformed1(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuResultadosGeneralesSaldosActionPerformed1
       editarResultados(true);


        ResultadosGraficos();
        SeleccionAccionResultados.setText("Select the top");
        ResultadosTopSaldos = true;
        //editarTopGrafica(false);
        AccionParaResultados.removeAllItems();
        seleccionarIteracion();

        int cantidadAgentes = 0;
        BD = new ConexionBD("mysql");
        ResultSet r = BD.consulta("SELECT count(IDAgente) FROM saldoxagente WHERE fecha=0");
        try {

                if(r.next())
                cantidadAgentes=r.getInt(1);



                BD.cerrarConexion();
            }
        catch (SQLException ex) {
                    ex.printStackTrace();
                }



        if(cantidadAgentes > 10)
        {
            AccionParaResultados.addItem("3");
            AccionParaResultados.addItem("5");
            AccionParaResultados.addItem("10");
            AccionParaResultados.addItem(cantidadAgentes);
        }
        else
        {
            if(cantidadAgentes > 5)
            {
                AccionParaResultados.addItem("3");
                AccionParaResultados.addItem("5");
                AccionParaResultados.addItem(cantidadAgentes);
            }
            else
            {
                if(cantidadAgentes > 3)
                {
                    AccionParaResultados.addItem("3");
                    AccionParaResultados.addItem(cantidadAgentes);
                }
                else
                    AccionParaResultados.addItem(cantidadAgentes);
            }

        }
    }//GEN-LAST:event_MenuResultadosGeneralesSaldosActionPerformed1

    private void AccionParaIndicadoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AccionParaIndicadoresMouseClicked
        if(numeroRepeticiones>1)
        {
            if(ResultadosPromediosMoviles||ResultadosPromediosTriples||ResultadosVHF||ResultadosPromediosSimple||ResultadosROC||ResultadosMACD||ResultadosRSI||ResultadosMomento)
            {

                int iterSeleccionada = Integer.parseInt(AccionParaResultados.getSelectedItem().toString());
                System.out.println(iterSeleccionada);
                try {
                String nombreAgente = AccionParaIndicadores.getSelectedItem().toString();
                


                       AccionParaIteracion.removeAllItems();

                        BD = new ConexionBD("mysql");
                        ResultSet r = BD.consulta("select p.nombre, a.IDAgente from analisistecnico a, bursatil b, producto p where b.nombre = '"+nombreAgente+"' and b.IDAgente = a.IDAgente and a.IDProducto = p.IDProducto and a.repeticion = "+iterSeleccionada+" group by p.IDProducto");


                        
                         while(r.next())
                             AccionParaIteracion.addItem(r.getString(1));

                                BD.cerrarConexion();
                            }
                        catch (SQLException ex) {
                                    ex.printStackTrace();
                                }
                        catch (NullPointerException npe) {
                            System.out.println("Excepcion fff");
                     }
                
            }
            
        }
    }//GEN-LAST:event_AccionParaIndicadoresMouseClicked

    private void StylizedDistributionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StylizedDistributionActionPerformed
        editarResultados(true);

        ResultadosGraficos();

        seleccionarIteracion();

        SeleccionAccionResultados.setText("Select the stock");
        ResuldatosAccionStylizedDistributions = true;

        consultaParaResultados("SELECT nombre FROM producto");
    }//GEN-LAST:event_StylizedDistributionActionPerformed

    private void StylizedReturnsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StylizedReturnsActionPerformed
        editarResultados(true);

        ResultadosGraficos();

        seleccionarIteracion();

         AccionParaIndicadores.addItem(String.valueOf(0));
        SeleccionAccionResultados.setText("Select the stock");
        ResuldatosAccionStylizedReturns = true;

        consultaParaResultados("SELECT nombre FROM producto");
    }//GEN-LAST:event_StylizedReturnsActionPerformed

    private void StylizedClusteringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StylizedClusteringActionPerformed
       editarResultados(true);

        ResultadosGraficos();

        seleccionarIteracion();
         AccionParaIndicadores.addItem(String.valueOf(0));
        SeleccionAccionResultados.setText("Select the stock");
        ResuldatosAccionStylizedClustering = true;

        consultaParaResultados("SELECT nombre FROM producto");
    }//GEN-LAST:event_StylizedClusteringActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        editarResultados(true);

        ResultadosGraficos();

        seleccionarIteracion();
       
        SeleccionAccionResultados.setText("Select the stock");
        ResuldatosAccionAutocorrBy = true;

        consultaParaResultados("SELECT nombre FROM producto");
        
        SeleccionAccionIndicadores.setText("Select the lag");
        AccionParaIndicadores.removeAllItems();
            for(int i=0;i<=20;i++)
                AccionParaIndicadores.addItem(String.valueOf(i));
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        
         
            final ResumenLiquidez graficar = new ResumenLiquidez();
            graficar.pack();
            RefineryUtilities.centerFrameOnScreen(graficar);
            graficar.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
            graficar.setVisible(true);
        
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
       editarResultados(true);

        ResultadosGraficos();

        seleccionarIteracion();
         AccionParaIndicadores.addItem(String.valueOf(0));
        SeleccionAccionResultados.setText("Select the stock");
        ResultadosFundamentalValue = true;

        consultaParaResultados("SELECT nombre FROM producto");
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });

        


    }

    public void seleccionarIteracion()
    {
        if(numeroRepeticiones > 1)
        {
            AceptarAccionIndicadores.setVisible(false);
            AccionParaIndicadores.setVisible(true);
            SeleccionAccionIndicadores.setVisible(true);
            //ResultadosGraficos();

            if(AccionesIndicadores)
            agregarIteracionIndicadores();
            else
                agregarIteracion();
        }
        else
        {

            editarResultadosIndicadores(false);
        }
    }

    public void Iteracion()
    {
            editarResultados(true);
            editarResultadosIndicadores(false);
            
            SeleccionAccionResultados.setText("Select the iteration");
            AccionParaResultados.removeAllItems();
            for(int i=1;i<=numeroRepeticiones; i++)
            AccionParaResultados.addItem(String.valueOf(i));

            resultados = false;
    }

    public void consultaParaResultados(String query)
    {
        AccionParaResultados.removeAllItems();

        BD = new ConexionBD("mysql");
        ResultSet r = BD.consulta(query);
        try {
         while(r.next())
                   AccionParaResultados.addItem(r.getString(1));

                BD.cerrarConexion();
            }
        catch (SQLException ex) {
                    ex.printStackTrace();
                }
    }

  
    public void editarResultados(boolean opcion)
    {
                AccionParaResultados.setVisible(opcion);
                AceptarAccionResultados.setVisible(opcion);
                SeleccionAccionResultados.setText("Select the stock");
                SeleccionAccionResultados.setVisible(opcion);

    }

    public void editarResultadosIndicadores(boolean opcion)
    {

                AccionParaIndicadores.setVisible(opcion);
                AceptarAccionIndicadores.setVisible(opcion);
                SeleccionAccionIndicadores.setVisible(opcion);
    }

    public void editarIteracion(boolean opcion)
    {
                SeleccionIteracion.setVisible(opcion);
                AccionParaIteracion.setVisible(opcion);
    }

    public void editarTodo(boolean opcion)
    {
                //MenuResultados.setEnabled(opcion);
                MenuSimulacionDetener.setEnabled(opcion);
                MenuSimulacionIniciar.setEnabled(opcion);
                MenuSimulacionPausar.setEnabled(opcion);
                editarResultados(opcion);
                editarResultadosIndicadores(opcion);
                editarIteracion(opcion);
    }

    public void ResultadosGraficos()
    {
            ResultadosAccion = false;
            ResultadosAgenteUtilidades = false;
            ResultadosAgenteAccion = false;
            ResultadosGuardarCotizaciones = false;
            ResultadosTopSaldos = false;
            ResultadosTopUtilidades = false;
            ResultadosTransacciones = false;

            ResultadosRentabilidadAgente = false;
            ResultadosAgentesPeriodo = false;
            ResultadosRentabilidadAccion = false;
            ResultadosAccionesVolatilidad = false;

            ResultadosAccionCandlesTick = false;
            ResultadosAccionStylized = false;
            ResultadosAccionLiquidity = false;

            ResuldatosAccionStylizedReturns = false;
            ResuldatosAccionStylizedDistributions = false;
            ResuldatosAccionStylizedClustering = false;
            ResuldatosAccionAutocorrBy = false;

            ResultadosPromediosMoviles = false;
            ResultadosRSI = false;
            ResultadosVHF = false;
            ResultadosPromediosSimple = false;
            ResultadosPromediosTriples = false;
            ResultadosMACD = false;
            ResultadosROC = false;
            ResultadosMomento = false;

            ResultadosFundamentalValue = false;
            
            ResultadosOverview = false;
            ResultadosAgentesPeriodo = false;
            ResultadosRentabilidadAgente = false;
            ResultadosRentabilidadAccion = false;
            ResultadosAccionesVolatilidad = false;
            resultados = true;

            AccionesIndicadores = false;

            if(numeroRepeticiones>1)
            editarIteracion(false);


    }

    public void editarSimulacion(boolean opcion)
     {
                MenuSimulacionDetener.setEnabled(opcion);
                MenuSimulacionIniciar.setEnabled(opcion);
                MenuSimulacionPausar.setEnabled(opcion);

    }

     private void agregarIteracionIndicadores() {
             SeleccionAccionResultados.setText("Select the iteration");
            AccionParaResultados.removeAllItems();
            AccionParaIndicadores.removeAllItems();
            SeleccionAccionIndicadores.setText("Select the agent");
            for(int i=1;i<=numeroRepeticiones; i++)
                AccionParaResultados.addItem(String.valueOf(i));
    }

     private void agregarIteracion()
    {
           SeleccionAccionResultados.setText("Select the stock");
           SeleccionAccionIndicadores.setText("Select the iteration");
            AccionParaIndicadores.removeAllItems();
            for(int i=1;i<=numeroRepeticiones; i++)
                AccionParaIndicadores.addItem(String.valueOf(i));

     }


Runtime runInstance;

ArrayList<AgentController> AgentesSimulacion = new ArrayList<AgentController>();

public int iterations = 1;
public int mostrargrafica = 0;
public static JFrame frame;
public boolean resultados = true;
public boolean ResultadosOverview = false;
public boolean ResultadosAgentesPeriodo = false;
public boolean ResultadosRentabilidadAgente = false;
public boolean ResultadosRentabilidadAccion = false;
public boolean ResultadosAccionesVolatilidad = false;
public boolean ResultadosAccionCandlesTick = false;
public boolean ResultadosAccionStylized = false;

public boolean ResuldatosAccionStylizedReturns = false;
public boolean ResuldatosAccionStylizedDistributions = false;
public boolean ResuldatosAccionStylizedClustering = false;
public boolean ResuldatosAccionAutocorrBy = false;
public boolean ResultadosAccionLiquidity = false;
public boolean ResultadosAccion = false;
public boolean ResultadosAgenteUtilidades = false;
public boolean ResultadosAgenteAccion = false;
public boolean ResultadosGuardarCotizaciones = false;
public boolean ResultadosTopSaldos = false;
public boolean ResultadosTopUtilidades = false;
public boolean ResultadosTransacciones = false;

public boolean ResultadosPromediosMoviles = false;
public boolean ResultadosRSI = false;
public boolean ResultadosVHF = false;
public boolean AccionesIndicadores = false;

public boolean ResultadosPromediosSimple = false;
public boolean ResultadosPromediosTriples = false;
public boolean ResultadosMACD = false;
public boolean ResultadosROC = false;
public boolean ResultadosMomento = false;
public boolean ResultadosFundamentalValue = false;
private boolean reanudar = false;



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox AccionParaIndicadores;
    private javax.swing.JComboBox AccionParaIteracion;
    private javax.swing.JComboBox AccionParaResultados;
    private javax.swing.JButton AceptarAccionIndicadores;
    private javax.swing.JButton AceptarAccionResultados;
    private javax.swing.JLabel Escudo;
    private javax.swing.JMenu MenuAyuda;
    private javax.swing.JMenuItem MenuAyudaAcercaDe;
    private javax.swing.JMenuItem MenuAyudaManual;
    private javax.swing.JMenuBar MenuPrincipal;
    public static javax.swing.JMenu MenuResultados;
    private javax.swing.JMenuItem MenuResultadosAccion;
    private javax.swing.JMenu MenuResultadosAgente;
    private javax.swing.JMenuItem MenuResultadosAgenteAcciones;
    private javax.swing.JMenuItem MenuResultadosAgenteUtilidades;
    private javax.swing.JMenuItem MenuResultadosCandlesTick;
    private javax.swing.JMenu MenuResultadosGenerales;
    private javax.swing.JMenuItem MenuResultadosGeneralesAcciones;
    private javax.swing.JMenuItem MenuResultadosGeneralesAgentes;
    private javax.swing.JMenuItem MenuResultadosGeneralesSaldos;
    private javax.swing.JMenuItem MenuResultadosGeneralesTransacciones;
    private javax.swing.JMenuItem MenuResultadosGeneralesUtilidades;
    private javax.swing.JMenuItem MenuResultadosGeneralesUtilidadesPorAcciones;
    private javax.swing.JMenuItem MenuResultadosGeneralesVolatiles;
    private javax.swing.JMenuItem MenuResultadosLiquidity;
    private javax.swing.JMenuItem MenuResultadosMACD;
    private javax.swing.JMenuItem MenuResultadosMomento;
    private javax.swing.JMenuItem MenuResultadosPromediosMoviles;
    private javax.swing.JMenuItem MenuResultadosPromediosSimples;
    private javax.swing.JMenuItem MenuResultadosPromediosTriples;
    private javax.swing.JMenuItem MenuResultadosROC;
    private javax.swing.JMenuItem MenuResultadosRSI;
    private javax.swing.JMenuItem MenuResultadosResumen;
    private javax.swing.JMenuItem MenuResultadosStylized;
    private javax.swing.JMenuItem MenuResultadosVHF;
    private javax.swing.JMenu MenuSimulacion;
    private javax.swing.JMenuItem MenuSimulacionDetener;
    private javax.swing.JMenuItem MenuSimulacionGuardar;
    public static javax.swing.JMenuItem MenuSimulacionIniciar;
    private javax.swing.JMenuItem MenuSimulacionParametros;
    private javax.swing.JMenuItem MenuSimulacionPausar;
    private javax.swing.JLabel SeleccionAccionIndicadores;
    private javax.swing.JLabel SeleccionAccionResultados;
    private javax.swing.JLabel SeleccionIteracion;
    private javax.swing.JMenu StilizedMenu;
    private javax.swing.JMenuItem StylizedClustering;
    private javax.swing.JMenuItem StylizedDistribution;
    private javax.swing.JMenuItem StylizedReturns;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem menuCargarSimulacion;
    public static javax.swing.JPanel panelGrafico;
    // End of variables declaration//GEN-END:variables
public static javax.swing.JPanel panelAuxiliar = new javax.swing.JPanel();;

    public  void cerrarParametros()
    {//this.setVisible(false);
     editarSimulacion(true);
    }


    ////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////FIN CLASE PRINCIPAL////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////
 

public void ejecutarSimulacion()
{
    
   String nombreSalida;
    char a = '\\';
    if(nombreArchivo.lastIndexOf("/")!=-1)
    nombreSalida = nombreArchivo.substring(nombreArchivo.lastIndexOf("/")+1,nombreArchivo.length()-4);
    else
    nombreSalida = nombreArchivo.substring(nombreArchivo.lastIndexOf(a)+1,nombreArchivo.length()-4);

        try {
            // Create a file:
            System.setOut(new PrintStream(new FileOutputStream("Output-"+nombreSalida+".txt")));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        

       
     

         BDinicializar = new ConexionBD("mysql");
         BDinicializar.inicializarBD();
         BDinicializar.cerrarConexion();

    BD = new ConexionBD("mysql");
    //-----------------LECTURA DE LOS PRODUCTOS DEL XML---------------------------

    try
    {
        SAXBuilder builder=new SAXBuilder(false);
        Document doc;
        doc = builder.build(new File(nombreArchivo));
        Element raiz=doc.getRootElement();
        totalAcciones = Integer.parseInt(raiz.getAttributeValue("numeroAcciones"));
        numeroRepeticiones = Integer.parseInt(raiz.getAttributeValue("numeroRepeticiones"));
        
        
        if(totalAcciones != 0)
        {
        ProbabilidadesAcciones = new String[totalAcciones];
                
        Element elementAcciones = raiz.getChild("acciones");
        List listaAcciones = elementAcciones.getChildren("accion");
        Noperaciones = new float[listaAcciones.size()];
        for(int i=0; i<listaAcciones.size(); i++)
        {
           /* System.out.println("=============> valor De i en el ciclo: " + i);
            Element elemAccion = (Element)listaAcciones.get(i);

            int idProducto = Integer.valueOf(elemAccion.getChild("idProducto").getText()).intValue();
            int fecha = Integer.valueOf(elemAccion.getChild("fecha").getText()).intValue();
            String precioInicio = elemAccion.getChildText("precioInicio");
            String precioFin = elemAccion.getChildText("precioFin");
            String precioMax = elemAccion.getChildText("precioMax");
            String precioMin = elemAccion.getChildText("precioMin");
            String precioProm = elemAccion.getChildText("precioProm");
            String volumen = elemAccion.getChildText("volumen");
            BD.insertarCotizacionDesdeArchivo(idProducto, fecha, precioFin, precioMax, precioMin, precioMin, precioProm, volumen);
            * */
      //      System.out.println("=============> valor De i en el ciclo: " + i);
            Element elemAccion = (Element)listaAcciones.get(i);
            int idProducto = Integer.valueOf(elemAccion.getChildText("idProducto")).intValue();
            String nombre = elemAccion.getChildText("nombre");
            
            
            /*archivos = new FileWriter(nombre+".txt");
            crearArchivo = new PrintWriter(archivos);
            crearArchivo.flush();
            crearArchivo.close();
            archivosImpresion.add(crearArchivo);*/
            
            
            String probabilidad = elemAccion.getChildText("probabilidad");
            
            if(!probabilidades && probabilidad!=null) probabilidades = true;
            
            if(probabilidades)
                ProbabilidadesAcciones[i] = probabilidad;
            
            String descripcion = elemAccion.getChildText("descripcion");
            Noperaciones[i] = Float.parseFloat(elemAccion.getChildText("Operaciones"));


            int paqueteMin = 0;//Integer.valueOf(elemAccion.getChildText("paqueteMin")).intValue();


            //FormaHistoricos.add(elemAccion.getChildText("CargarHistorico"));

            BD.insertarProducto(idProducto, nombre, descripcion, paqueteMin);
        }
        System.out.println("YA SE INSERTARON TODOS LOS PRODUCTOS EN LA BD!!!!!!!!!!");

        //---------------FIN LECTURA DE LOS PRODUCTOS DEL XML ------------------------

        //---------------LECTURA DE LAS COTIZACIONES DEL XML -------------------------

        Date horaInicial = new Date();
        Element elemCotizaciones = raiz.getChild("cotizaciones");
        List listaCotizaciones = elemCotizaciones.getChildren("cotizacion");
        
         String consulta = "INSERT INTO cotizacion VALUES";

        for(int i=0; i<listaCotizaciones.size(); i++)
        {
           // System.out.println("Estoy en la cotizacion: " + i);
            Element cotizacion = (Element)listaCotizaciones.get(i);

            int idProducto = Integer.valueOf(cotizacion.getChild("idAccion").getText()).intValue();
            int fecha = Integer.valueOf(cotizacion.getChild("fecha").getText()).intValue();
            String precioInicio = cotizacion.getChildText("precioInicio");
            String precioFin = cotizacion.getChildText("precioFin");
            String precioMax = cotizacion.getChildText("precioMax");
            String precioMin = cotizacion.getChildText("precioMin");
            String precioProm = cotizacion.getChildText("precioProm");
            String cantidad = cotizacion.getChildText("cantidad");
            if(cantidad.equals(".00"))cantidad="0";
            BD.insertarCotizacionDesdeArchivo(idProducto, fecha, precioInicio, precioFin, precioMax, precioMin, precioProm, cantidad,"0");

            //consulta+="( '"+idProducto+"','"+fecha+"','"+precioInicio+"','"+precioFin+"','"+precioMax+"','"+precioMin+"','"+precioProm+"','"+cantidad+"','"+0+"'),";
        }

         /*System.out.println((new Date()).getTime()-horaInicial.getTime());
         if(consulta.indexOf("'")!=-1)
                {
                consulta = consulta.substring(0, consulta.length()-1);




                System.out.println(" -> "+consulta);
                System.out.println((new Date()).getTime()-horaInicial.getTime());
                BD.ejecutar(consulta, "Prueba");

                }*/

        System.out.println((new Date()).getTime()-horaInicial.getTime());

        //------------FIN LECTURA DE LAS COTIZACIONES DESDE EL XML--------------------
        }
    }
    catch(Exception e)
    {
        e.printStackTrace();
    }

    BD.cerrarConexion();

    //Se llama el metodo para crear instancia, perfil y controlador de agentes de jade
    crearAgentesParaSimulacion();


}

    ContainerController agentContainer = null;
    Profile jadeProfile = null;
    String[] ProbabilidadesAcciones;
    boolean probabilidades = false;

public void crearAgentesParaSimulacion()
{

    
    
            if(RepeticionActual==1)
            {
                //-------------------Se crea el RunTime de JADE------------------------------
                // Se crea una instancia de ejecucion

                runInstance = Runtime.instance();
                runInstance.setCloseVM(true);
                // Crea un perfil
                

                // Create a new non-main container, connecting to the default
                // main container (i.e. on this host, port 1099)
                jadeProfile = new ProfileImpl(false);
                //agentContainer = runInstance.createMainContainer(jadeProfile);
                agentContainer = runInstance.createMainContainer(jadeProfile);
            try {
                //Ejecuta la interfaz de jade
                agentContainer.createNewAgent("rma", "jade.tools.rma.rma",null).start();
               
  
                }
             catch (StaleProxyException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
                 
                
            }
          else
          {
                /*runInstance.shutDown();
                runInstance.startUp(jadeProfile);*/
                
                
               eliminarAgentes();

          }


//    dsadas

    

    Object[] args;


        MenuSimulacionPausar.setEnabled(true);
        MenuSimulacionDetener.setEnabled(true);
        MenuResultados.setEnabled(false);
        mostrargrafica = 0;
        String series = "";

        CantidadFusis=0;
        CantidadAleatorios=0;
        Arrays.fill(CantidadTecnicos, 0);


        try
            {
            SAXBuilder builder=new SAXBuilder(false);
            Document doc;
            doc = builder.build(new File(nombreArchivo));
            Element raiz = doc.getRootElement();

            periodosSimulacion = Integer.parseInt(raiz.getAttributeValue("periodos"));
            numeroBursatiles = Integer.parseInt(raiz.getAttributeValue("numeroAgentes"));


            /*cargarSeries = Integer.parseInt(raiz.getAttributeValue("cargarSeries"));
            if(cargarSeries == 1)
            {
                        Element nombreSeries = raiz.getChild("nombreSeries");
                        List listaNombreSeries = nombreSeries.getChildren("serie");

                        args = new Object[listaNombreSeries.size() + 3];
                        args[0] = periodosSimulacion;
                        args[1] = numeroBursatiles;
                        args[2] = true;

                        for(int i=0; i<listaNombreSeries.size(); i++)
                        {
                            Element elemSerie = (Element)listaNombreSeries.get(i);
                            /*if(i==0)
                                series = elemSerie.getText();
                            else
                                series = series.concat(" "+elemSerie.getText());
                            args[i + 3] = elemSerie.getText();

                        }


                 AgentController subastador = ac.createNewAgent("subastador", "agentes.AgenteSubastador", args);
                 subastador.start();
            }*/

                
             int fundamentales = 0;

            if(numeroBursatiles !=0)
            {
                //comando = comando.concat(" Mercado:simulacion.agentes.AgenteMercado("+totalAcciones+")");
                // Todos los parametros del agente
                 /*args = new Object[1];
                 args[0] = totalAcciones;
                 AgentController mercado = ac.createNewAgent("Mercado", "agentes.AgenteMercado", args);
                 mercado.start();*/

                Element elementAgentes = raiz.getChild("agentes");
                List listaAgentesBursatiles = elementAgentes.getChildren("agenteDifuso");
                List listaAgentesTecnicos = elementAgentes.getChildren("agenteTecnico");
                List listaAgentesAleatorios = elementAgentes.getChildren("agenteAleatorio");
                List listaAgentesFundamentales = elementAgentes.getChildren("agenteFundamental");
                List listaAgentesAdaptativos = elementAgentes.getChildren("agenteAdaptativo");
               
                if(listaAgentesFundamentales.size() != 0)
                fundamentales = 1;
     
                
                for(int i=0; i<listaAgentesBursatiles.size(); i++)
                {
                    Element elemAgente = (Element)listaAgentesBursatiles.get(i);
                    String nombre = elemAgente.getChildText("nombre");
                    float saldoBursatiles = Float.valueOf(elemAgente.getChildText("saldo")).floatValue();
                    float propension = Float.valueOf(elemAgente.getChildText("propension")).floatValue();
                    Element elemCantidades = elemAgente.getChild("cantidadAcciones");
                    List listaCantidad = elemCantidades.getChildren();
                    //String cantidad = "";

                    args = new Object[listaCantidad.size() + 2];
                    args[0] = saldoBursatiles;
                    args[1] = propension;
                    for(int j=0; j<listaCantidad.size(); j++) {
                        Element elemCantidad = (Element)listaCantidad.get(j);
                        //cantidad = cantidad.concat(" " + elemCantidad.getText());
                        args[j + 2] = elemCantidad.getText();
                    }

                    //comando = comando.concat(" "+nombre+":simulacion.agentes.AgenteDifuso("+saldo+" "+propension + cantidad+")");
                    // Todos los parametros del agente


                     AgentesSimulacion.add(agentContainer.createNewAgent(nombre, "agentes.AgenteDifuso", args));
                     AgentesSimulacion.get(AgentesSimulacion.size()-1).start();
                     /*AgentController difuso = agentContainer.createNewAgent(nombre, "agentes.AgenteDifuso", args);
                     difuso.start();*/
                     CantidadFusis++;

                }

                for(int i=0; i<listaAgentesTecnicos.size(); i++)
                {
                    Element elemAgente = (Element)listaAgentesTecnicos.get(i);
                    String nombre = elemAgente.getChildText("nombre");
                    float saldoTecnicos = Float.valueOf(elemAgente.getChildText("saldo")).floatValue();
                    int indicador = Integer.valueOf(elemAgente.getChildText("indicador")).intValue();
                    Element elemCantidades = elemAgente.getChild("cantidadAcciones");
                    List listaCantidad = elemCantidades.getChildren();
                    //String cantidad = "";

                    args = new Object[listaCantidad.size() + 2];
                    args[0] = saldoTecnicos;
                    args[1] = indicador;

                    for(int j=0; j<listaCantidad.size(); j++) {
                        Element elemCantidad = (Element)listaCantidad.get(j);
                        //cantidad = cantidad.concat(" " + elemCantidad.getText());
                        args[j + 2] = elemCantidad.getText();
                    }

                    //comando = comando.concat(" "+nombre+":simulacion.agentes.AgenteTecnico("+saldo+" "+indicador + cantidad+")");
                    // Todos los parametros del agente

                   
                     /*AgentController tecnico = agentContainer.createNewAgent(nombre, "agentes.AgenteTecnico", args);
                     tecnico.start();*/
                     AgentesSimulacion.add(agentContainer.createNewAgent(nombre, "agentes.AgenteTecnico", args));
                     AgentesSimulacion.get(AgentesSimulacion.size()-1).start();

                     //CantidadTecnicos[dsad];
                }


                for(int i=0; i<listaAgentesAleatorios.size(); i++)
                {
                    Element elemAgente = (Element)listaAgentesAleatorios.get(i);
                    String nombre = elemAgente.getChildText("nombre");
                    float saldo = Float.valueOf(elemAgente.getChildText("saldo")).floatValue();
                    float probabilidadCompra = Float.valueOf(elemAgente.getChildText("probabilidadCompra")).floatValue();
                    float probabilidadVenta = Float.valueOf(elemAgente.getChildText("probabilidadVenta")).floatValue();
                    Element elemCantidades = elemAgente.getChild("cantidadAcciones");
                    List listaCantidad = elemCantidades.getChildren();
                    //String cantidad = "";

                    args = new Object[listaCantidad.size() + 3];
                    args[0] = saldo;
                    args[1] = probabilidadCompra;
                    args[2] = probabilidadVenta;

                    for(int j=0; j<listaCantidad.size(); j++) {
                        Element elemCantidad = (Element)listaCantidad.get(j);
                        //cantidad = cantidad.concat(" " + elemCantidad.getText());
                        args[j + 3] = elemCantidad.getText();
                    }

                    //comando = comando.concat(" "+nombre+":simulacion.agentes.AgenteAleatorio("+saldo+" "+probabilidadCompra+" "+probabilidadVenta + cantidad+")");
                    // Todos los parametros del agente


                    /*
                     AgentController aleatorio = agentContainer.createNewAgent(nombre, "agentes.AgenteAleatorio", args);
                     aleatorio.start();*/

                     AgentesSimulacion.add(agentContainer.createNewAgent(nombre, "agentes.AgenteAleatorio", args));
                     AgentesSimulacion.get(AgentesSimulacion.size()-1).start();
                     CantidadAleatorios++;
                }
 
                for(int i=0; i<listaAgentesFundamentales.size(); i++)
                {
                    Element elemAgente = (Element)listaAgentesFundamentales.get(i);
                    String nombre = elemAgente.getChildText("nombre");
                    float saldo = Float.valueOf(elemAgente.getChildText("saldo")).floatValue();
                    float probabilidad = Float.valueOf(elemAgente.getChildText("probabilidadOfertas")).floatValue();
                    Element elemCantidades = elemAgente.getChild("cantidadAcciones");
                    List listaCantidad = elemCantidades.getChildren();
                    //String cantidad = "";


                    args = new Object[listaCantidad.size() + 2];
                    args[0] = saldo;
                    args[1] = probabilidad;

                    for(int j=0; j<listaCantidad.size(); j++) {
                        Element elemCantidad = (Element)listaCantidad.get(j);
                        //cantidad = cantidad.concat(" " + elemCantidad.getText());
                        args[j + 2] = elemCantidad.getText();
                    }

                    //comando = comando.concat(" "+nombre+":simulacion.agentes.AgenteAleatorio("+saldo+" "+probabilidadCompra+" "+probabilidadVenta + cantidad+")");
                    // Todos los parametros del agente


                    /*
                     AgentController aleatorio = agentContainer.createNewAgent(nombre, "agentes.AgenteAleatorio", args);
                     aleatorio.start();*/

                     AgentesSimulacion.add(agentContainer.createNewAgent(nombre, "agentes.AgenteFundamental", args));
                     AgentesSimulacion.get(AgentesSimulacion.size()-1).start();
                     CantidadAleatorios++;
                }
                
                for(int i=0; i<listaAgentesAdaptativos.size(); i++)
                {
                    Element elemAgente = (Element)listaAgentesAdaptativos.get(i);
                    String nombre = elemAgente.getChildText("nombre");
                    float saldo = Float.valueOf(elemAgente.getChildText("saldo")).floatValue();
                    
                    float probabilidadCompra = Float.valueOf(elemAgente.getChildText("probabilidadCompra")).floatValue();
                    float probabilidadVenta = Float.valueOf(elemAgente.getChildText("probabilidadVenta")).floatValue();
                    //int indicador = Integer.valueOf(elemAgente.getChildText("indicador")).intValue();
                    float probabilidad = Float.valueOf(elemAgente.getChildText("probabilidadOfertas")).floatValue();
                    Element elemCantidades = elemAgente.getChild("cantidadAcciones");
                    List listaCantidad = elemCantidades.getChildren();
                    //String cantidad = "";


                    args = new Object[listaCantidad.size() + 4];
                    args[0] = saldo;
                    args[1] = probabilidadCompra;
                    args[2] = probabilidadVenta;
                   // args[3] = indicador;
                    args[3] = probabilidad;

                    for(int j=0; j<listaCantidad.size(); j++) {
                        Element elemCantidad = (Element)listaCantidad.get(j);
                        //cantidad = cantidad.concat(" " + elemCantidad.getText());
                        args[j + 4] = elemCantidad.getText();
                    }

                    //comando = comando.concat(" "+nombre+":simulacion.agentes.AgenteAleatorio("+saldo+" "+probabilidadCompra+" "+probabilidadVenta + cantidad+")");
                    // Todos los parametros del agente


                    /*
                     AgentController aleatorio = agentContainer.createNewAgent(nombre, "agentes.AgenteAleatorio", args);
                     aleatorio.start();*/

                     AgentesSimulacion.add(agentContainer.createNewAgent(nombre, "agentes.AgenteAdaptativo", args));
                     AgentesSimulacion.get(AgentesSimulacion.size()-1).start();
                     CantidadAleatorios++;
                }
                 
            }
            
            
            //comando = "java jade.Boot -gui subastador:simulacion.agentes.AgenteSubastador("+periodosSimulacion+" "+numeroBursatiles+" false)";'
                // Todos los parametros del agente
                   if (probabilidades) {
                    args = new Object[3 + Noperaciones.length + ProbabilidadesAcciones.length+fundamentales];
                } else {
                    args = new Object[3 + Noperaciones.length];
                }
                args[0] = periodosSimulacion;
                args[1] = numeroBursatiles;
                args[2] = RepeticionActual;
                for (int i = 3; i < 3 + Noperaciones.length; i++) {
                    args[i] = Noperaciones[i - 3];
                }

               // System.out.println(" - "+ProbabilidadesAcciones.length);
                if (probabilidades) 
                    for (int i = 3 + Noperaciones.length; i < 3 + Noperaciones.length + ProbabilidadesAcciones.length; i++) 
                        args[i] = ProbabilidadesAcciones[i - 3 - Noperaciones.length];
                
                if(fundamentales != 0)
                    args[3+Noperaciones.length+ProbabilidadesAcciones.length] = "fundamentales";
                 //nombresAgentes.add("subastador");

                 /*AgentController subastador = agentContainer.createNewAgent("subastador", "agentes.AgenteSubastador", args);
                 subastador.start();*/

                 ///Falta que se ingrese la cantidad de operaciones

                 AgentesSimulacion.add(agentContainer.createNewAgent("administrador", "agentes.AgenteAdministrador", args));
                 AgentesSimulacion.get(AgentesSimulacion.size()-1).start();

                /* AgentesSimulacion.add(agentContainer.createNewAgent("subastador", "agentes.AgenteSubastador", args));
                 AgentesSimulacion.get(AgentesSimulacion.size()-1).start();*/
            
        } catch(Exception e) {
            e.printStackTrace();
        }

    CalcesRunTime(periodosSimulacion);
}

 public void GuardarCotizacion(String nombreAccion, int itera){

     //PrintWriter archivo=null;
     String[] Nulos = new String[10];
     String nombreCotizacion = nombreAccion + ".xml";
     int cantidad = 0;
        try {
            Origen = new FileWriter(nombreAccion+".txt");
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        archivo = new PrintWriter(Origen);

          BD = new ConexionBD("mysql");
            ResultSet r = BD.consulta("SELECT * FROM cotizacion WHERE (repeticion = 0 or repeticion = "+itera+") and IDProducto = (SELECT IDProducto FROM producto WHERE nombre = \""+nombreAccion+"\")");
            try{
                while(r.next())
                {
                    for(int i=0; i<8; i++)
                    {
                        if(r.getObject(i+1)==null)
                            Nulos[i]="-1";
                        else
                            Nulos[i]=r.getObject(i+1).toString();

                        Nulos[i]=Nulos[i].replace('.', ',');

                    }
                    archivo.println(Nulos[7]+"\t"+Nulos[3]+"\t"+Nulos[4]+"\t"+Nulos[6]+"\t"+Nulos[5]);
                    cantidad++;
                }
            }catch(Exception e)
                {
                    e.printStackTrace();
                }

            BD.cerrarConexion();
        archivo.close();
 //-----------------------CREACIÓN DEL ARCHIVO XML --------------------------------
     /*File fichero = new File(nombreCotizacion);
        if(fichero.exists())
        {
            fichero.delete();
        }
        try {
            fichero.createNewFile();
        } catch (IOException ex) {
            Logger.getLogger(parametros_simulacion.class.getName()).log(Level.SEVERE, null, ex);
        }
        Element subastaRaiz = new Element("Subasta");
        subastaRaiz.setAttribute("Guardar", "0");

        Element cotizaciones = new Element("cotizaciones");

        subastaRaiz.addContent(cotizaciones);

        Document doc = new Document(subastaRaiz);
        try
        {
          XMLOutputter out=new XMLOutputter(Format.getPrettyFormat());
          FileOutputStream file=new FileOutputStream(nombreCotizacion);
          out.output(doc,file);
          file.flush();
          file.close();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        //----------------------FIN CREACIÓN DEL ARCHIVO XML -----------------------------
       

        //-------------ADICIÓN DE COTIZACION AL XML ---------------------------
                try
                {
                    
                    SAXBuilder builder=new SAXBuilder(false);
                   
                    doc = builder.build(nombreCotizacion);
                    Element raiz=doc.getRootElement();

                    XMLOutputter out = new XMLOutputter(Format.getPrettyFormat());
                    FileOutputStream file = new FileOutputStream(nombreCotizacion);

                 
                    //----------CAPTURA DEL ELEMENTO COTIZACIONES DEL XML ---------

                    Element elementCotizaciones = raiz.getChild("cotizaciones");

                    //---------FIN CAPTURA DEL ELEMENTO COTIZACIONES DEL XML ---------


                        BD = new ConexionBD("mysql");
                        ResultSet r = BD.consulta("SELECT * FROM cotizacion WHERE IDProducto = (SELECT IDProducto FROM producto WHERE nombre = \""+nombreAccion+"\")");

                        while(r.next())
                        {
                            for(int i=0; i<8; i++)
                            {
                                if(r.getObject(i+1)==null)
                                    Nulos[i]="-1";
                                else
                                    Nulos[i]=r.getObject(i+1).toString();

                            }

                            System.out.println("Número de períodos = " + Nulos[1] + "" +
                                "\nVolumen = " + Nulos[7] + "" +
                                "\nPrecio inicio = " + Nulos[2] + "" +
                                "\nPrecio Fin = " + Nulos[3] + "" +
                                "\nPrecio minimo = " + Nulos[5] + "" +
                                "\nPrecio máximo = " + Nulos[4] + "" +
                                "\nPrecio promedio = " + Nulos[6] + "\n\n");
//---------------INSERCION DE LAS COTIZACIONES EN EL XML-------------
                            Element cotizacion = new Element("cotizacion");
                                Element elementIdAccion = new Element("idAccion");
                                    elementIdAccion.setText(""+Nulos[0]);
                                Element elementFecha = new Element("fecha");
                                    elementFecha.setText(Nulos[1]);
                                Element elementPrecioInicio = new Element("precioInicio");
                                    elementPrecioInicio.setText(Nulos[2]);
                                Element elementPrecioFin = new Element("precioFin");
                                    elementPrecioFin.setText(Nulos[3]);
                                Element elementPrecioMax = new Element("precioMax");
                                    elementPrecioMax.setText(Nulos[4]);
                                Element elementPrecioMin = new Element("precioMin");
                                    elementPrecioMin.setText(Nulos[5]);
                                Element elementPrecioProm = new Element("precioProm");
                                    elementPrecioProm.setText(Nulos[6]);
                                Element elementVolumen = new Element("volumen");
                                    elementVolumen.setText(Nulos[7]);

                               cotizacion.addContent(elementIdAccion);
                               cotizacion.addContent(elementFecha);
                               cotizacion.addContent(elementPrecioInicio);
                               cotizacion.addContent(elementPrecioFin);
                               cotizacion.addContent(elementPrecioMax);
                               cotizacion.addContent(elementPrecioMin);
                               cotizacion.addContent(elementPrecioProm);
                               cotizacion.addContent(elementVolumen);

                               elementCotizaciones.addContent(cotizacion);

                    //-------------FIN INSERCION DE LAS COTIZACIONES EN EL XML ----------

                        }

                        BD.cerrarConexion();


                    //--------------------VACIADO DE LOS DATOS EN EL XML-------------------
                    out.output(doc, file);
                    file.flush();
                    file.close();
                    //------------------FIN VACIADO DE LOS DATOS EN EL XML ----------------
                    //BD.cerrarConexion();

                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }
                 */

        pop message = new pop(nombreAccion, cantidad);
        message.setVisible(true);

 }

 /////////////////////////////Variables//////////////
    public static String[] nombres= new String[100];
    public static float[] saldo=new float[100];
    public static float[] indices=new float[100];
    public static String[] cantidadAcciones=new String[100];
   
    public static int numeroBursatiles = 0;
    public static int CantidadFusis = 0;
    public static int CantidadAleatorios = 0;
    public static int[] CantidadTecnicos = new int[7];
//    public static ArrayList<String> FormaHistoricos = new ArrayList<String>();

    /////////////////////////////////////////////

    public static boolean CargarArchivo = false;

    public static int agentesGenerar = 0;
    public static int numeroRepeticiones = 0;
    public float[] Noperaciones;
    public static int RepeticionActual = 1;
    public static int periodosSimulacion = 0;
    public static int numeroTotalAcciones=0;
    public static int totalAcciones;
    public static int accionActual = 0;
    public static long semilla = (long)1000.0;

     
    public static int getAccionActual()
    {
        return accionActual;
    }
    public static long getSemilla()
    {
        return semilla;
    }
    public static void setSemilla(long s)
    {
        semilla=s;
    }




    // Clase para manejar las extensiones cuando se utiliza el JFileChooser
    class ExtensionFileFilter extends FileFilter {
        String extension;
        String descripcion;

        public ExtensionFileFilter(String desc, String ext)
        {
            this.descripcion = desc;
            this.extension = ext;
        }

        public String getDescription()
        {
            return this.descripcion;
        }

        public boolean accept(File f)
        {
            if (f.isDirectory())
                return true;
            else {
                String path = f.getAbsolutePath().toLowerCase();
                if ((path.endsWith(extension) && (path.charAt(path.length() - extension.length() - 1)) == '.')) {
                    return true;
                }
            }
            return false;
        }
    }

    //////////////GRAFICA EN TIEMPO DE LA SIMULACION///////////////////////////////
    //////////////////////////////////////////////////////////////////////////////


    ConexionBD BDcalces = new ConexionBD("mysql");
    ConexionBD BDgrafica = new ConexionBD("mysql");
    ResultSet fechas =null;
    ResultSet calces =null;
    ResultSet graficas =null;


    /** The time series data. */

    private TimeSeries series;
    private JProgressBar PorcentajeSimulacion = new JProgressBar();
    private JProgressBar PorcentajeTotal = new JProgressBar();

    private int periodos = 0;
    
    private double factor = 0;
    private double factor2 = 0;

    /** The most recent value added. */
    private double lastValue = 100.0;
    private BufferedReader reader = null;

    public void cambiar()
    {
        this.setContentPane(contenedor);
    }

    /**
     * Constructs a new demonstration application.
     *
     * @param title  the frame title.
     */
    public void CalcesRunTime(int cantidad) {

        if(cantidad != 0)
        {
            periodos = cantidad;
            factor = 100/(double)periodos;
            factor2 = 100/(double)(periodos*numeroRepeticiones);
            
        }
        
        BD = new ConexionBD("mysql");

        System.out.println("periodos "+periodos);
        //System.out.println("factor "+factor);

        this.series = new TimeSeries("",  Millisecond.class);
        final TimeSeriesCollection dataset = new TimeSeriesCollection(this.series);
        final JFreeChart chart = createChart(dataset);

        final ChartPanel chartPanel = new ChartPanel(chart);

        final JButton button = new JButton("Add New Data Item");


        PorcentajeSimulacion.setMinimum(0);
        PorcentajeSimulacion.setMaximum(100);
        PorcentajeSimulacion.setStringPainted(true);
        PorcentajeSimulacion.setValue(0);
        
        
        PorcentajeTotal.setMinimum(0);
        PorcentajeTotal.setMaximum(100);
        PorcentajeTotal.setStringPainted(true);
        PorcentajeTotal.setValue(0);


        panelGrafico = new JPanel(new BorderLayout());
        panelGrafico.setOpaque(true);
        
        JPanel panelProgreso = new JPanel(new BorderLayout());
         panelProgreso.setOpaque(true);
        
        panelGrafico.add(chartPanel);

        panelProgreso.add(PorcentajeSimulacion, BorderLayout.NORTH);
        panelProgreso.add(PorcentajeTotal, BorderLayout.SOUTH);
        
        
      
        panelGrafico.add(panelProgreso, BorderLayout.SOUTH);
        
       this.setContentPane(panelGrafico);

        this.validate();
        HiloGraficaRunTime hiloGraficaRunTime = new HiloGraficaRunTime();
        

    }


    class HiloGraficaRunTime extends java.lang.Thread
    {
        public HiloGraficaRunTime()
        {
            this.start();
        }

        @Override
        public void run()
        {
            /*String leer;
            int CalceshastaAhora = 0;
            int CalcesActual = 0;
            int CalcesGraficar = 0;*/
            int tama = 0;
            int actual = 0;
            try {   System.out.println("Esperando 2 segundos - Inicio de grafrica de calces por segundo");
                    HiloGraficaRunTime.sleep(2000);
                    System.out.println("Pasaron 2 segundos - Inicio de grafrica de calces por segundo");

                    while(actual < periodos)
                    {
                        HiloGraficaRunTime.sleep(1000);

                    tama = 0;
                            /*try {

                            Scanner reader = new Scanner(new File("CalceRunTime.txt"));
                            //reader = new BufferedReader(new FileReader("CalceRunTime.txt"));
                                if(reader.hasNextLine())
                                {
                                    leer = reader.nextLine();
                                    if(leer.length() != 0)
                                    CalceshastaAhora = Integer.parseInt(leer);
                                }

                                    
                                    System.out.println( "MAIN "+AgenteAdministrador.CalcesEnRunTime);
                             } catch (IOException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);

                        //CalceshastaAhora = CalcesActual;

                    }*/
                    //CalceshastaAhora = AgenteAdministrador.CalcesEnRunTime;

                    //System.out.println("***********Simulacion Actual "+AgenteAdministrador.simulacionActual);
                    
                    
                            if(/*CalcesActual <= CalceshastaAhora &&*/ mostrargrafica == 0)
                            {
                                //final Millisecond now = new Millisecond();
                                //System.out.println("Now = " + now.toString());
                                //CalcesGraficar = CalceshastaAhora - CalcesActual;
                                //CalcesGraficar = CalceshastaAhora;
                                
                                //if(CalcesGraficar > 0)
                                //System.out.println("Se agrega "+CalcesGraficar);
                                series.add(new Millisecond(), AgenteAdministrador.CalcesEnRunTime );
                                AgenteAdministrador.CalcesEnRunTime=1;
                                //System.out.println("Valor agregado "+CalcesGraficar);
                                //CalcesActual = CalceshastaAhora;
                            }

                        actual=0;

                        fechas = BD.consulta("SELECT max(fecha) FROM saldoxagente WHERE fecha >= 1 and repeticion = "+iterations);
                        if(fechas.next())
                        actual=fechas.getInt(1);

                        PorcentajeSimulacion.setValue((int)(actual*factor));
                        PorcentajeTotal.setValue((int)((actual+(periodos*(RepeticionActual-1)))*factor2)); 
                       // System.out.println("Actual :"+actual+" factor: "+factor+" actual*factor: "+actual*factor+" trunca "+(int)(actual*factor));

                        if(mostrargrafica == -1)
                                actual = periodos;
                    }

           

            BD.cerrarConexion();
            PorcentajeSimulacion.setValue(100);
            BDcalces.cerrarConexion();


           MenuSimulacionPausar.setEnabled(false);
           MenuSimulacionDetener.setEnabled(false);
           MenuResultados.setEnabled(true);

                 /////////////////////////////////////////////////////////
           /////////////////////////////////////////////////////////
           /////////////////////////////////////////////////////////
           /////////////////////////////////////////////////////////
           /////////////////////////////////////////////////////////
                //new Simulacion().setVisible(true);
                //panelGrafico.setVisible(false);
                //cambiar();

                ////Poner codigo para volver a repetir todo
                //dsadsad
            HiloGraficaRunTime.sleep(1000);
                RepeticionActual++;
                    if(RepeticionActual <= numeroRepeticiones)
                    {
                        System.out.println("*******************************************************");
                        System.out.println("*******************************************************");
                        System.out.println("Vuelve a repetirse todo - Iteracion "+RepeticionActual);
                        System.out.println("*******************************************************");
                        System.out.println("*******************************************************");

                        iterations = RepeticionActual;
                        HiloGraficaRunTime.sleep(10000);
                        crearAgentesParaSimulacion();

                    }
                    else
                    {
                        System.out.println("*******************************************************");
                        System.out.println("FIN DE LA SIMULACION");
                        System.out.println("*******************************************************");
                        
                        new Simulacion().setVisible(true);
                        panelGrafico.setVisible(false);
                        cambiar();

                        HiloGraficaRunTime.sleep(7000);
                        eliminarAgentes();
                        
                       
                    }

                }
        catch (InterruptedException ex) {
            ex.printStackTrace();
        }
        catch (SQLException ex) {
                    ex.printStackTrace();
          }

        }
    }

    private void eliminarAgentes()
    {
        try{
            
            long time = 40000;
                System.out.println("Antes de eliminar todos los agentes, esperando "+time/1000+" segundos para continuar");
                Thread.sleep(time);
                System.out.println("Se van a eliminar los nuevos agentes");

            
            
        while(!AgentesSimulacion.isEmpty())
                {

                    //System.out.println("A muerto "+AgentesSimulacion.get(0).getName()+" tam "+AgentesSimulacion.size());
                    AgentesSimulacion.get(0).kill();
                    AgentesSimulacion.remove(0);

                }
                //return;
                //AgentesSimulacion.clear();
                time = 30000;
                System.out.println("Eliminados todos los agentes, esperando "+time/1000+" segundos para continuar");
                Thread.sleep(time);
                System.out.println("Se van a agregar los nuevos agentes");

                } catch (ControllerException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
    catch (InterruptedException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Creates a sample chart.
     *
     * @param dataset  the dataset.
     *
     * @return A sample chart.
     */
    private JFreeChart createChart(final XYDataset dataset) {
        final JFreeChart result = ChartFactory.createTimeSeriesChart(
            "Matches on Simulation",
            "Date",
            "",
            dataset,
            false,
            true,
            false
        );
        final XYPlot plot = result.getXYPlot();
        ValueAxis axis = plot.getDomainAxis();
        axis.setAutoRange(true);
        axis.setFixedAutoRange(60000.0);  // 60 seconds
        axis = plot.getRangeAxis();
        //axis.setRange(-1.0, 15.0);
        axis.setAutoRange(true);
        axis.setFixedAutoRange(-10000.0);
        return result;
    }

}
