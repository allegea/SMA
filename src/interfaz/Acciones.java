/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Acciones.java
 *
 * Created on 15/02/2009, 09:56:29 PM
 */

package interfaz;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.Scanner;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Random;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.swing.JFileChooser;
import org.jdom.*;
import org.jdom.input.*;
import org.jdom.output.*;

/**
 *
 * @author allegea
 */
public class Acciones extends javax.swing.JFrame {
public static int accionActual = 0;
public static int accionTotal = 0;
public static int AgentesTotal = 0;
public static Vector vectorNombresAcciones = new Vector();

public static ArrayList<Long> cantidadesATransar = new ArrayList<Long>();
public static ArrayList<Float> precioReferencia = new ArrayList<Float>();
Random aleatorio;
long operacions = 0;
    //public static int accionActual = 0;
    //public static long semilla = (long)1000.0;
    /** Creates new form Acciones */
    public Acciones(int total,int agentes) {
       accionTotal = total;
        AgentesTotal = agentes;

        aleatorio = new Random();

        initComponents();
        btnAceptar.setEnabled(false);
        int mostrar = accionActual + 1;
        this.setTitle("Stock " + mostrar);
        if(accionTotal==accionActual)
        {       //this.setVisible(false);
                this.dispose();
                accionActual = 0;
                //new parametros().setVisible(true);
                new Agentes(AgentesTotal).setVisible(true);

        }
        else {
            this.setVisible(true);
            this.setLocationRelativeTo(null);
        }

        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtDescripcion = new javax.swing.JTextArea();
        NombreLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        PaqueteLabel = new javax.swing.JLabel();
        txtOperaciones = new javax.swing.JTextField();
        btnAceptar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Stock(s) for simulation");

        txtDescripcion.setColumns(20);
        txtDescripcion.setRows(5);
        jScrollPane1.setViewportView(txtDescripcion);

        NombreLabel.setText("Name");

        jLabel1.setText("Description");

        PaqueteLabel.setText("Operations for last 3 months");

        btnAceptar.setText("Continue");
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        jButton1.setText("Load Historic Values");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NombreLabel)
                            .addComponent(PaqueteLabel))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(txtOperaciones, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtNombre, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)))))
                    .addComponent(jLabel1))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 108, Short.MAX_VALUE)
                .addComponent(btnAceptar)
                .addGap(71, 71, 71))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NombreLabel)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PaqueteLabel)
                    .addComponent(txtOperaciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAceptar)
                    .addComponent(jButton1))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cargaArchivo()
    {
        JFileChooser fileChooser = new JFileChooser(".");
        //fileChooser.setLocale(Locale.ENGLISH);
        int seleccion = fileChooser.showOpenDialog(null);
        
            String ArchivoCargar;
            String nombre = txtNombre.getText();
            String descripcion = txtDescripcion.getText();
            String operaciones = txtOperaciones.getText();
            String errorCampoVacio = "";
            boolean hayErrorCampoVacio = false;
            String errorDatoInvalido = "";
            boolean hayErrorDatoInvalido = false;

            operacions = Long.parseLong(operaciones);

            if (nombre.isEmpty()) {
                hayErrorCampoVacio = true;
                errorCampoVacio = errorCampoVacio + "Nombre\n";
                
            }
            /*int p = 0;
            if (paquete.isEmpty()) {
                hayErrorCampoVacio = true;
                errorCampoVacio = errorCampoVacio + "Paquete mínimo\n";
            } else {
                try {
                    p = Integer.parseInt(paquete);
                    if (p < 0) {
                        hayErrorDatoInvalido = true;
                        errorDatoInvalido = errorDatoInvalido + "Paquete mínimo debe ser mayor que cero\n";
                    }
                } catch (NumberFormatException e) {
                    hayErrorDatoInvalido = true;
                    errorDatoInvalido = errorDatoInvalido + "Paquete mínimo debe tener valor numérico\n";
                }
            }*/

            if (hayErrorCampoVacio || hayErrorDatoInvalido) {
                final String error1 = errorCampoVacio;
                final String error2 = errorDatoInvalido;
                java.awt.EventQueue.invokeLater(new Runnable() {
                    public void run() {
                        new ErrorDatoNoValido(error1, error2).setVisible(true);
                    }
                });
            } else {
                if(seleccion == JFileChooser.APPROVE_OPTION)
                {
                    File fichero = fileChooser.getSelectedFile();
                    System.out.println("Seleccionó el archivo " + fichero.getName());

                    ArchivoCargar = new String(fichero.getName());
                    try
                    {
                        //-------------ADICIÓN DE ACCIÓN AL XML ---------------------------

                        SAXBuilder builder=new SAXBuilder(false);
                        Document doc;
                        File ficheroHistorico = new File(Main.nombreArchivo);
                        doc = builder.build(ficheroHistorico);
                        Element raiz=doc.getRootElement();
                        Element elementAcciones = raiz.getChild("acciones");
                        Element nuevaAccion = new Element("accion");
                        Element elementIdProducto = new Element("idProducto");
                            elementIdProducto.setText(Integer.valueOf(accionActual).toString());
                        Element elementNombre = new Element("nombre");
                            elementNombre.setText(nombre);

                            vectorNombresAcciones.add(nombre);
                        Element elementDescripcion = new Element("descripcion");
                            elementDescripcion.setText(descripcion);
                        Element elementOperaciones = new Element("Operaciones");
                            elementOperaciones.setText(operaciones);
                        Element elementProbabilidad = new Element("probabilidad");
                        float probabilidad = (float) ((aleatorio.nextFloat())*(0.25-0.05)+0.05);
                               elementProbabilidad.setText(probabilidad+"");

                        nuevaAccion.addContent(elementIdProducto);
                        nuevaAccion.addContent(elementNombre);
                        nuevaAccion.addContent(elementDescripcion);
                        nuevaAccion.addContent(elementOperaciones);
                        nuevaAccion.addContent(elementProbabilidad);
                       // nuevaAccion.addContent(elementHistorico);

                        elementAcciones.addContent(nuevaAccion);

                        XMLOutputter out = new XMLOutputter(Format.getPrettyFormat());
                        FileOutputStream file = new FileOutputStream(ficheroHistorico);


                        //-----------FIN ADICIÓN DE ACCIÓN AL XLM -------------------------
                        //BufferedReader reader = new BufferedReader(new FileReader(fichero));
                        //String linea = reader.readLine();
                       // basedatos.ConexionBD BD = new basedatos.ConexionBD("mysql");
                        int fechaActual = 0;

                        int IDAccion = Acciones.accionActual;


                        //----------CAPTURA DEL ELEMENTO COTIZACIONES DEL XML ---------
                        if(ArchivoCargar.endsWith(".xml"))
                        {       System.out.println("Desde un XML");
                            Element elementCotizaciones = raiz.getChild("cotizaciones");

                            //CAPTURA LOS DATOS DEL HISTORIAL COTIZACIONES
                            SAXBuilder builderArchivo=new SAXBuilder(false);
                            Document docArchivo;
                            docArchivo = builderArchivo.build(ArchivoCargar);
                            Element raizArchivo=docArchivo.getRootElement();
                            Element elementCotizacionesArchivo = raizArchivo.getChild("cotizaciones");
                            List listaCotizaciones = elementCotizacionesArchivo.getChildren("cotizacion");

                            //---------FIN CAPTURA DEL ELEMENTO COTIZACIONES DEL XML ---------
                            for(int i=0; i<listaCotizaciones.size(); i++)
                            {
                                System.out.println("Estoy en la cotizacion: " + i);
                                Element cotizacionArchivo = (Element)listaCotizaciones.get(i);


                                String precioInicio = cotizacionArchivo.getChildText("precioInicio");
                                String precioFin = cotizacionArchivo.getChildText("precioFin");
                                String precioMax = cotizacionArchivo.getChildText("precioMax");
                                String precioMin = cotizacionArchivo.getChildText("precioMin");
                                String precioProm = cotizacionArchivo.getChildText("precioProm");
                                String cantidad = cotizacionArchivo.getChildText("cantidad");


                                /*StringTokenizer tokens = new StringTokenizer(linea);
                                Vector precios = new Vector();
                                while(tokens.hasMoreTokens())
                                {
                                    precios.add(tokens.nextToken());
                                    //precios[indiceActual] = tokens.nextToken();
                                }*/

                                //-------------INSERTAR COTIZACION EN EL XML -----------------------


                                Element cotizacion = new Element("cotizacion");
                                    Element elementIdAccion = new Element("idAccion");
                                        elementIdAccion.setText(Integer.valueOf(IDAccion).toString());
                                    Element elementFecha = new Element("fecha");
                                        elementFecha.setText(Integer.valueOf(fechaActual).toString());
                                    Element elementPrecioInicio = new Element("precioInicio");
                                        elementPrecioInicio.setText(precioInicio);
                                    Element elementPrecioFin = new Element("precioFin");
                                        elementPrecioFin.setText(precioFin);
                                    Element elementPrecioMax = new Element("precioMax");
                                        elementPrecioMax.setText(precioMax);
                                    Element elementPrecioMin = new Element("precioMin");
                                        elementPrecioMin.setText(precioMin);
                                    Element elementPrecioProm = new Element("precioProm");
                                        elementPrecioProm.setText(precioProm);
                                    Element elementCantidad = new Element("cantidad");
                                        elementCantidad.setText(cantidad);

                                   cotizacion.addContent(elementIdAccion);
                                   cotizacion.addContent(elementFecha);
                                   cotizacion.addContent(elementPrecioInicio);
                                   cotizacion.addContent(elementPrecioFin);
                                   cotizacion.addContent(elementPrecioMax);
                                   cotizacion.addContent(elementPrecioMin);
                                   cotizacion.addContent(elementPrecioProm);
                                   cotizacion.addContent(elementCantidad);

                                   elementCotizaciones.addContent(cotizacion);


                                //----------FIN INSERTAR COTIZACION EN EL XML ----------------------

                                //BD.insertarCotizacionDesdeArchivo(IDAccion, fechaActual, precioInicio, precioFin, precioMax, precioMin, precioProm, volumen);
                                fechaActual--;
                                //linea = reader.readLine();
                            }
                        }


                        ArrayList<Long> cantidades= new ArrayList<Long>();

                        if(ArchivoCargar.endsWith(".txt"))
                        {       System.out.println("Desde un TXT");
                                Element elementCotizaciones = raiz.getChild("cotizaciones");

                            fechaActual = 1;
                            ArrayList<String> buf = new ArrayList<String>();
                            Scanner in = new Scanner(fichero);
                            while (in.hasNextLine()) {
                                String tmp;
                                if (!(tmp = in.nextLine()).isEmpty()) {
                                    buf.add(tmp);
                                    fechaActual--;
                                }
                            }
                            in.close();

                             String precioInicio, precioFin = "", precioMax, precioMin, precioProm, cantidad;

                            for (int i=0; i<buf.size(); i++) {
                                StringTokenizer tokens = new StringTokenizer(buf.get(i));
                                Vector precios = new Vector();
                                while(tokens.hasMoreTokens())
                                {
                                    precios.add(tokens.nextToken());
                                    //precios[indiceActual] = tokens.nextToken();
                                }

                                /*for(int j=0; j< precios.size(); j++)
                                    System.out.println(precios.elementAt(j));

                                System.out.println("Aqui va otro");*/

                                if(precios.size()==5)
                                {
                                    cantidad = (String)precios.elementAt(0);

                                    precioInicio = precioFin;
                                    precioFin = (String)precios.elementAt(1);
                                    if(i==0)
                                    {
                                         precioInicio = precioFin;
                                         precioInicio = eliminarPuntos(precioInicio);
                                         precioInicio = precioInicio.replace(',', '.');

                                    }

                                    precioMax = (String)precios.elementAt(2);
                                    precioProm = (String)precios.elementAt(3);
                                    precioMin = (String)precios.elementAt(4);
                                    
                                    
                                    
                                    
                                    precioFin = eliminarPuntos(precioFin);
                                    precioFin = precioFin.replace(',', '.');

                                    if(fechaActual==0)precioReferencia.add(Float.parseFloat(precioFin));

                                    precioMax = eliminarPuntos(precioMax);
                                    precioMax = precioMax.replace(',', '.');
                                    precioMin = eliminarPuntos(precioMin);
                                    precioMin = precioMin.replace(',', '.');
                                    precioProm = eliminarPuntos(precioProm);
                                    precioProm = precioProm.replace(',', '.');
                                    cantidad = eliminarPuntos(cantidad);

                                    if(cantidad.indexOf(",")==0)
                                        cantidades.add(0l);
                                    else
                                    cantidades.add(Long.parseLong(cantidad.substring(0, cantidad.indexOf(",")!=-1?cantidad.indexOf(","):cantidad.length())));

                                    cantidad = cantidad.replace(',', '.');

                                    

                                    Element cotizacion = new Element("cotizacion");
                                        Element elementIdAccion = new Element("idAccion");
                                            elementIdAccion.setText(Integer.valueOf(IDAccion).toString());
                                        Element elementFecha = new Element("fecha");
                                            elementFecha.setText(Integer.valueOf(fechaActual).toString());
                                        Element elementPrecioInicio = new Element("precioInicio");
                                            elementPrecioInicio.setText(precioInicio);
                                        Element elementPrecioFin = new Element("precioFin");
                                            elementPrecioFin.setText(precioFin);
                                        Element elementPrecioMax = new Element("precioMax");
                                            elementPrecioMax.setText(precioMax);
                                        Element elementPrecioMin = new Element("precioMin");
                                            elementPrecioMin.setText(precioMin);
                                        Element elementPrecioProm = new Element("precioProm");
                                            elementPrecioProm.setText(precioProm);
                                        Element elementCantidad = new Element("cantidad");
                                            elementCantidad.setText(cantidad);

                                       cotizacion.addContent(elementIdAccion);
                                       cotizacion.addContent(elementFecha);
                                       cotizacion.addContent(elementPrecioInicio);
                                       cotizacion.addContent(elementPrecioFin);
                                       cotizacion.addContent(elementPrecioMax);
                                       cotizacion.addContent(elementPrecioMin);
                                       cotizacion.addContent(elementPrecioProm);
                                       cotizacion.addContent(elementCantidad);

                                       elementCotizaciones.addContent(cotizacion);
                                }
                                //BD.insertarCotizacionDesdeArchivo(IDAccion, fechaActual, precioInicio, precioFin, precioMax, precioMin, precioProm, volumen);
                                fechaActual++;
                            }
                        }

                        int sumaMax=0;
                        float cantidadesNegociadas = 0;
                        for(int i=cantidades.size()-1; i>=0 &&  sumaMax++<62;i--)
                        {
                            cantidadesNegociadas += cantidades.get(i);
                            //System.out.println(cantidades.get(i));
                        }

                        System.out.println(" CantidadesaTRansar - "+(long)cantidadesNegociadas/operacions);
                        
                        cantidadesATransar.add((long)cantidadesNegociadas/operacions);

                        //-----------------ESCRITURA DE LAS COTIZACIONES EN EL XML -------------
                        out.output(doc, file);
                        file.flush();
                        file.close();

                        //---------------FIN ESCRITURA DE LAS COTIZACIONES EN EL XML -----------
                        //BD.cerrarConexion();

                     }
                    catch(FileNotFoundException e)
                    {
                        System.out.println("El archivo no existe");
                    }
                    catch(IOException e)
                    {
                        System.out.println("Error en la lectura de la línea");
                        e.printStackTrace();
                    }
                    catch(Exception e)
                    {
                        e.printStackTrace();
                    }

                    btnAceptar.setEnabled(true);
                    accionActual++;

                }
                else
                {
                    System.out.println("Pulsó cancelar");
                }
            }
    }

    private String eliminarPuntos(String start)
    {
        char[] begin = start.toCharArray();
        String end = "";
        for(int i=0;i<start.length();i++)
        {
            if(begin[i]!='.')
                end+=begin[i];
        }
        return end;
    }

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
        // TODO add your handling code here:
        System.out.println("Acción actual: " + accionActual + "\nTotal Acciones: " + accionTotal);


        if(accionActual<accionTotal)
            new Acciones(accionTotal,AgentesTotal);

        else
        {
                   // this.setVisible(false);
                    accionActual = 0;
                    //new parametros().setVisible(true);
                    new Agentes(AgentesTotal).setVisible(true);
        }
        this.dispose();

    }//GEN-LAST:event_btnAceptarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       cargaArchivo();
    }//GEN-LAST:event_jButton1ActionPerformed



    /**
    * @param args the command line arguments
    */
    /*public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Acciones(1,0).setVisible(true);
            }
        });
    }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel NombreLabel;
    private javax.swing.JLabel PaqueteLabel;
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtDescripcion;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtOperaciones;
    // End of variables declaration//GEN-END:variables

}
