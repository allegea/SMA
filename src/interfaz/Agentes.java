/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * parametros.java
 *
 * Created on 13/12/2008, 05:15:29 PM
 */

package interfaz;

import java.awt.Label;
import java.awt.TextField;
import java.util.Vector;
import java.io.*;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Random;
import java.util.Set;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import org.jdom.*;
import org.jdom.input.*;
import org.jdom.output.*;

/**
 *
 * @author Alejo
 */
public class Agentes extends javax.swing.JFrame {
public static int AgenteActual = 0;
public static int cantidadTotal = 0;
JComboBox TiposIndicadores = new JComboBox();
Vector valorCantidadAcciones = new Vector();
//Random objeto = new java.util.Random(514467);
Random objeto = new java.util.Random();
    /** Creates new form parametros */
    public Agentes(int agentes)
    {
        
        cantidadTotal = agentes;
        initComponents();
        this.setLocationRelativeTo(null);
        
        int mostrar = AgenteActual + 1;
        if(cantidadTotal > 1)
        this.setTitle("Information of the "+cantidadTotal+" agents");
        else
        this.setTitle("Information of the agent");
        
        int cantidadProductos=Acciones.vectorNombresAcciones.size();

        //ResultSet consultaProductos = BD.consulta("SELECT nombre FROM producto");
        panelAcciones.setLayout(new java.awt.GridLayout(cantidadProductos, 2));
        
       System.out.println(Main.periodosSimulacion);
       int cantidadSimulaciones = Main.periodosSimulacion;
       float saldoagentes = 0;
        
        try 
        {
            DecimalFormat format = new DecimalFormat("###.###");
            for(int i=0; i<cantidadProductos; i++)
            {
                String nombreProducto = (String)Acciones.vectorNombresAcciones.get(i);
                /*System.out.println("Precio - "+Acciones.precioReferencia.get(i));
                System.out.println("Cantidad - "+Acciones.cantidadesATransar.get(i));
                float dsa = Acciones.cantidadesATransar.get(i);
                System.out.println("Precio*Cantidad - "+Acciones.precioReferencia.get(i)*dsa);
                System.out.println("Saldo "+format.format(Acciones.precioReferencia.get(i)*((float)Acciones.cantidadesATransar.get(i)*(cantidadSimulaciones/2))));*/
                saldoagentes+=Acciones.precioReferencia.get(i)*(Acciones.cantidadesATransar.get(i)*(cantidadSimulaciones/2));
                panelAcciones.add(new Label(nombreProducto));
                TextField txtCantidad = new TextField();
                txtCantidad.setText(Acciones.cantidadesATransar.get(i)*(cantidadSimulaciones)+"");
                //System.out.println(txtCantidad.getHeight() + " - "+ txtCantidad.getWidth());
                txtCantidad.setSize(txtCantidad.getHeight(), txtCantidad.getWidth()*100);
                valorCantidadAcciones.add(txtCantidad);
                panelAcciones.add(txtCantidad);
                
            }

            
            cSaldo.setText(format.format(saldoagentes));
        } 
        catch (Exception e) 
        {
            e.printStackTrace();
        }
        
        //BD.cerrarConexion();
        this.pack();

        //if(AgenteActual == cantidadTotal)
            //this.setVisible(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        AgentesAceptar = new javax.swing.JButton();
        PanelCombo = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        panelAcciones = new javax.swing.JPanel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cAleatorios = new javax.swing.JSpinner();
        cTecnicos = new javax.swing.JSpinner();
        cDifusos = new javax.swing.JSpinner();
        cSaldo = new javax.swing.JTextField();
        jSeparator4 = new javax.swing.JSeparator();
        cFundamental = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        cAdaptativos = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();

        setTitle("Agent(s) for simulation");

        AgentesAceptar.setText("Accept");
        AgentesAceptar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AgentesAceptarMouseClicked(evt);
            }
        });

        PanelCombo.setLayout(new java.awt.GridLayout(1, 1));

        javax.swing.GroupLayout panelAccionesLayout = new javax.swing.GroupLayout(panelAcciones);
        panelAcciones.setLayout(panelAccionesLayout);
        panelAccionesLayout.setHorizontalGroup(
            panelAccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 17, Short.MAX_VALUE)
        );
        panelAccionesLayout.setVerticalGroup(
            panelAccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 17, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(panelAcciones);

        jLabel1.setText("Input the number of stocks for each product");

        jLabel2.setText("Number of agents for each type");

        jLabel3.setText("ZIA");

        jLabel4.setText("Technical");

        jLabel5.setText("Fuzzy");

        jLabel6.setText("Initial Budget ($)");

        cAleatorios.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));

        cTecnicos.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));

        cDifusos.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));

        cFundamental.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));

        jLabel7.setText("Fundamental");

        cAdaptativos.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));

        jLabel8.setText("Adaptive");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(201, 201, 201)
                        .addComponent(PanelCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8))
                                .addGap(99, 99, 99)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cFundamental, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                                    .addComponent(cDifusos, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                                    .addComponent(cAdaptativos, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE))
                                .addGap(60, 60, 60))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(161, 161, 161)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(cTecnicos)
                                    .addComponent(cAleatorios, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(51, 51, 51)
                                .addComponent(jLabel6)
                                .addGap(48, 48, 48)
                                .addComponent(cSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(144, 144, 144)
                        .addComponent(AgentesAceptar)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cAleatorios, cDifusos, cSaldo, cTecnicos});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cAleatorios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cTecnicos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cDifusos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7)
                    .addComponent(cFundamental, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(PanelCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cAdaptativos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(cSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addGap(17, 17, 17)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(AgentesAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AgentesAceptarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AgentesAceptarMouseClicked

        int Aleatorios = Integer.parseInt(cAleatorios.getValue().toString());
        int Difusos = Integer.parseInt(cDifusos.getValue().toString());
        int Tecnicos = Integer.parseInt(cTecnicos.getValue().toString());
        int Fundamental = Integer.parseInt(cFundamental.getValue().toString());
        int Adaptativos = Integer.parseInt(cAdaptativos.getValue().toString());
        
        if((Aleatorios + Difusos + Tecnicos+Fundamental+Adaptativos) != cantidadTotal)
        {
            JOptionPane.showMessageDialog(this,cantidadTotal+" agents should be distributed among the avalaible types");
            return;
        }
        
        
        
        ArrayList<Float> probabilidadCompra = new ArrayList<Float>();
        ArrayList<Float> probabilidadVenta = new ArrayList<Float>();
        //Collections.shuffle(probabilidad);
        //float[][] probabilidades = new float[2][Aleatorios];
        //////////Para que las probabilidades de compra y venta sean las mismas
        //Set<Float> pro = new HashSet<Float>();
        for(int i=0;i<Aleatorios;i++)
        {
            //probabilidades[0][i]=aleatorio(0.5f,0f);
            //pro.add(probabilidades[0][i]);
            float rand = aleatorio(0.5f,0f);
            probabilidadCompra.add(rand);
            probabilidadVenta.add(rand);
        }
        
        
        Collections.shuffle(probabilidadVenta);
        
        
        ArrayList<Float> AprobCompra = new ArrayList<Float>();
        ArrayList<Float> AprobVenta = new ArrayList<Float>();
        for(int i=0;i<Adaptativos;i++)
        {
            //probabilidades[0][i]=aleatorio(0.5f,0f);
            //pro.add(probabilidades[0][i]);
            float rand = aleatorio(0.5f,0f);
            AprobCompra.add(rand);
            AprobVenta.add(rand);
        }
        
        
        Collections.shuffle(AprobVenta);
        
        int w=0;
        float proC, proV,sumC,sumV;
        proC=proV=sumC=sumV=0;
        
        for(int i=0;i<probabilidadVenta.size();i++/*Float x:pro*/)
        {
            /*probabilidades[1][w]=x;
            proC+=probabilidades[0][w];
            proV+=probabilidades[1][w];
            w++;*/
            proC+=probabilidadCompra.get(i); 
            proV+=probabilidadVenta.get(i);
            //System.out.println(probabilidadCompra.get(i)+" - "+probabilidadVenta.get(i));
        }
        
         proC/=Aleatorios;
         proV/=Aleatorios;


                for(int i=0;i<Aleatorios;i++)
                {
                    /*sumC += Math.pow((probabilidades[0][i] - proC),2);
                    sumV += Math.pow((probabilidades[1][i] - proV),2);*/
                    sumC += Math.pow((probabilidadCompra.get(i) - proC),2);
                    sumV += Math.pow((probabilidadVenta.get(i) - proV),2);
                    
                }

                sumC = (float) Math.sqrt(sumC/(Aleatorios-1));
                sumV = (float) Math.sqrt(sumV/(Aleatorios-1));

                //System.out.println("Probabilidad de Compra - "+proC+" -Desviación "+sumC);
                //System.out.println("Probabilidad de Venta - "+proV+" -Desviación "+sumV);
       // System.out.println(pro);
        
        
        

        int indicadorNumero = -1;

        /*Principal.nombres[AgenteActual]=AgentesIngresarNombre.getText();
        Principal.saldo[AgenteActual]= Float.parseFloat(AgentesIngresarSaldo.getText());
        Principal.indices[AgenteActual]= Float.parseFloat(AgentesIngresarIndice.getText());
        */
        //-------------ADICIÓN DE AGENTE AL XML ---------------------------
        String saldo = cSaldo.getText();
        int cAle, cDif, cTec, cFund, cAdapt;
        cAle = 0;
        cDif = 0;
        cTec = 0;
        cFund = 0;
        cAdapt = 0;
        boolean aleatorio = false;
        boolean adaptati = false;
        

            try
            {
                SAXBuilder builder=new SAXBuilder(false);
                Document doc;
                File ficheroAgentes = new File(Main.nombreArchivo);
                doc = builder.build(ficheroAgentes);
                Element raiz=doc.getRootElement();
                Element elementAgentes = raiz.getChild("agentes");
            for(int j=0;j<cantidadTotal;j++)
            {
                Element nuevoAgente = null;
                Element elementPropension = null;
                Element elementProbabilidadVenta = null;
                Element elementProbabilidadFundamental = null;
                Element elementIndicador = null;
                Element elementNombre = null;

                if(cAle < Aleatorios)
                {
                    nuevoAgente = new Element("agenteAleatorio");
                    elementPropension = new Element("probabilidadCompra");
                    //elementPropension.setText(aleatorio(0.5f,0f)+"");
                    //elementPropension.setText(probabilidades[0][cAle]+"");
                    elementPropension.setText(probabilidadCompra.get(cAle) +"");

                    elementProbabilidadVenta = new Element("probabilidadVenta");
                    //elementProbabilidadVenta.setText(aleatorio(0.5f,0f)+"");
                    //elementProbabilidadVenta.setText(probabilidades[1][cAle]+"");
                    elementProbabilidadVenta.setText(probabilidadVenta.get(cAle)+"");
                    cAle++;
                    elementNombre = new Element("nombre");
                            elementNombre.setText("aA"+cAle);

                            aleatorio = true;
                }
                else
                {
                if(cTec < Tecnicos)
                    {
                        nuevoAgente = new Element("agenteTecnico");
                        elementPropension = new Element("indicador");
                        do
                        indicadorNumero = aleatorioInt(8);
                        while(indicadorNumero==4);
                        elementPropension.setText(indicadorNumero+"");

                        /*("RSI");
                        ("MACD");
                        ("ROC");
                        ("VHF");
                        ("Momento");
                        ("Promedios Simples");
                        ("Promedios Dobles");
                        ("Promedios Triples");*/
                        cTec++;
                        elementNombre = new Element("nombre");
                            elementNombre.setText("aT"+cTec);
                    }
                    else
                    {
                        if(cDif < Difusos)
                        {
                            nuevoAgente = new Element("agenteDifuso");
                            elementPropension = new Element("propension");
                            elementPropension.setText(aleatorio(1,0)+"");
                            cDif++;
                            elementNombre = new Element("nombre");
                            elementNombre.setText("aF"+cDif);
                        }
                        else
                        {
                            if(cFund < Fundamental)
                            {
                                nuevoAgente = new Element("agenteFundamental");
                                elementPropension = new Element("probabilidadOfertas");
                                elementPropension.setText(aleatorio(0.5f,0)+"");
                                cFund++;
                                elementNombre = new Element("nombre");
                                elementNombre.setText("aF"+cFund);
                            }
                            else
                            {
                                if(cAdapt < Adaptativos)
                                {
                                    nuevoAgente = new Element("agenteAdaptativo");
                                    elementPropension = new Element("probabilidadCompra");
                                    //elementPropension.setText(aleatorio(0.5f,0f)+"");
                                    //elementPropension.setText(probabilidades[0][cAle]+"");
                                    elementPropension.setText(AprobCompra.get(cAdapt) +"");

                                    elementProbabilidadVenta = new Element("probabilidadVenta");
                                    //elementProbabilidadVenta.setText(aleatorio(0.5f,0f)+"");
                                    //elementProbabilidadVenta.setText(probabilidades[1][cAle]+"");
                                    elementProbabilidadVenta.setText(AprobVenta.get(cAdapt)+"");
                                    
                                    elementIndicador = new Element("indicador");
                                    do
                                    indicadorNumero = aleatorioInt(8);
                                    while(indicadorNumero==4);
                                    elementIndicador.setText(indicadorNumero+"");
                                    
                                    
                                    elementProbabilidadFundamental = new Element("probabilidadOfertas");
                                    elementProbabilidadFundamental.setText(aleatorio(0.5f,0)+"");
                                    
                                    
                                    
                                    cAdapt++;
                                    elementNombre = new Element("nombre");
                                    elementNombre.setText("aAd"+cAdapt);

                                    adaptati = true;
                                    
                                }
                            }
                        }
                    }
                }

                
                Element elementSaldo = new Element("saldo");
                    elementSaldo.setText(saldo);

                Element elementCantidad = new Element("cantidadAcciones");

                //cantidadAcciones[AgenteActual]=(AgentesIngresarAcciones.getText()).replace(",", " ");
                int tamanoVector = valorCantidadAcciones.size();
                StringBuffer sbCantidadAcciones = new StringBuffer();
                for(int i=0; i<tamanoVector; i++)
                {
                    TextField txtCantidadAccion = (TextField)valorCantidadAcciones.elementAt(i);
                    String cantidad = txtCantidadAccion.getText();
                    Element elementCantidadAccion = new Element("accion");
                        elementCantidadAccion.setAttribute("nombre", Acciones.vectorNombresAcciones.get(i).toString());
                        //elementCantidadAccion.setAttribute("ID", Integer.toString(i));
                        elementCantidadAccion.setText(cantidad);
                    elementCantidad.addContent(elementCantidadAccion);
                    sbCantidadAcciones.append(cantidad + " ");

                }

                nuevoAgente.addContent(elementNombre);
                nuevoAgente.addContent(elementSaldo);
                nuevoAgente.addContent(elementPropension);
                if(aleatorio)
                {
                    nuevoAgente.addContent(elementProbabilidadVenta);
                    aleatorio = false;
                }
                
                if(adaptati)
                {
                    nuevoAgente.addContent(elementProbabilidadVenta);
                    nuevoAgente.addContent(elementIndicador);
                    nuevoAgente.addContent(elementProbabilidadFundamental);
                    adaptati = false;
                }
                

                nuevoAgente.addContent(elementCantidad);



                elementAgentes.addContent(nuevoAgente);

                //String cadenaCantidadAcciones = sbCantidadAcciones.toString();
                //System.out.println("Cadena para el .bat: " + cadenaCantidadAcciones);
                //Main.cantidadAcciones[AgenteActual]=cadenaCantidadAcciones;
                //AgenteActual++;

            }

                XMLOutputter out = new XMLOutputter(Format.getPrettyFormat());
                FileOutputStream file = new FileOutputStream(ficheroAgentes);

                out.output(doc, file);
                file.flush();
                file.close();
                
                
                //this.setVisible(false);
                this.dispose();


                
                {
                    Main.MenuSimulacionIniciar.setEnabled(true);
                    //AgenteActual = 0;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        

            //-----------FIN ADICIÓN DE ACCIÓN AL XLM -------------------------

}//GEN-LAST:event_AgentesAceptarMouseClicked

    private float aleatorio(float limiteSuperior, float limiteInferior)
    {
        return (objeto.nextFloat())*(limiteSuperior-limiteInferior)+limiteInferior;
    }

    private int aleatorioInt(int limiteSuperior)
    {
        return objeto.nextInt(limiteSuperior);
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Agentes(2).setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AgentesAceptar;
    private javax.swing.JPanel PanelCombo;
    public javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JSpinner cAdaptativos;
    private javax.swing.JSpinner cAleatorios;
    private javax.swing.JSpinner cDifusos;
    private javax.swing.JSpinner cFundamental;
    private javax.swing.JTextField cSaldo;
    private javax.swing.JSpinner cTecnicos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JPanel panelAcciones;
    // End of variables declaration//GEN-END:variables

    /*private String[] nombres= new String[100];
    private float[] saldo=new float[100];
    private float[] indices=new float[100];
    private String[] cantidadAcciones=new String[100];
    private int numeroBursatiles=0;*/
}
